# Val Town Project Rules and Guidelines

You are an advanced assistant specialized in generating Val Town code.


## Types of Vals

### 1. Script Vals

- Basic JavaScript/TypeScript functions
- Can be imported by other vals
- Example structure:

```typescript
export function myFunction() {
  // Your code here
}
```

### 2. HTTP Vals

- Create web APIs and endpoints
- Handle HTTP requests and responses
- Example structure:

```typescript
export default async function (req: Request) {
  return new Response("Hello World");
}
```

### 3. Cron Vals

- Run on a schedule
- Use cron expressions for timing
- Example structure:

```typescript
export default async function () {
  // Scheduled task code
}
```

### 4. Email Vals

- Process incoming emails
- Handle email-based workflows
- Example structure:

```typescript
export default async function (email: Email) {
  // Process email
}
```

## Core Guidelines

- Ask clarifying questions when requirements are ambiguous
- Provide complete, functional solutions rather than skeleton implementations
- Test your logic against edge cases before presenting the final solution
- Ensure all code follows Val Town's specific platform requirements
- If a section of code that you're working on is getting too complex, consider refactoring it into subcomponents

## Code Standards

- Generate code in TypeScript
- Add appropriate TypeScript types and interfaces for all data structures
- Prefer official SDKs or libraries than writing API calls directly
- Ask the user to supply API or library documentation if you are at all unsure about it
- **Never bake in secrets into the code** - always use environment variables
- Include comments explaining complex logic (avoid commenting obvious operations)
- Follow modern ES6+ conventions and functional programming practices if possible

## Val Town Standard Libraries

Val Town provides several hosted services and utility functions.

### Blob Storage
```ts
import { blob } from "https://esm.town/v/std/blob";
await blob.setJSON("myKey", { hello: "world" });
let blobDemo = await blob.getJSON("myKey");
let appKeys = await blob.list("app_");
await blob.delete("myKey");
```

### SQLite
```ts
import { sqlite } from "https://esm.town/v/stevekrouse/sqlite";
const TABLE_NAME = 'todo_app_users_2';
// Create table - do this before usage and change table name when modifying schema
await sqlite.execute(`CREATE TABLE IF NOT EXISTS ${TABLE_NAME} (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL
)`);
// Query data
const result = await sqlite.execute(`SELECT * FROM ${TABLE_NAME} WHERE id = ?`, [1]);
```

Note: When changing a SQLite table's schema, change the table's name (e.g., add _2 or _3) to create a fresh table.

### OpenAI
```ts
import { OpenAI } from "https://esm.town/v/std/openai";
const openai = new OpenAI();
const completion = await openai.chat.completions.create({
  messages: [
    { role: "user", content: "Say hello in a creative way" },
  ],
  model: "gpt-4o-mini",
  max_tokens: 30,
});
```

### Email
```ts
import { email } from "https://esm.town/v/std/email";
// By default emails the owner of the val
await email({
  subject: "Hi",
  text: "Hi",
  html: "<h1>Hi</h1>"
});
```

## Val Town Utility Functions

Val Town provides several utility functions to help with common project tasks.

### Importing Utilities
Always import utilities with version pins to avoid breaking changes:
```ts
import { parseProject, readFile, serveFile } from "https://esm.town/v/std/utils@85-main/index.ts";
```

### Available Utilities

1. **parseProject** - Extract information about the current project from import.meta.url:
```ts
const projectVal = parseProject(import.meta.url);
console.log(projectVal.username); // Owner of the project
console.log(projectVal.name);     // Project name
console.log(projectVal.version);  // Version number
console.log(projectVal.branch);   // Branch name
console.log(projectVal.links.self.project); // URL to the project page
```

2. **readFile** - Read files from within the project:
```ts
// Read a file from the project
const fileContent = await readFile("/frontend/index.html", import.meta.url);
```

3. **serveFile** - Serve project files with proper content types:
```ts
// Serve a file from the project with proper Content-Type header
app.get("/public/style.css", c => serveFile("/frontend/style.css", import.meta.url));
```

4. **listFiles** - List all files in the project:
```ts
const files = await listFiles(import.meta.url);
```

5. **fetchTranspiledJavaScript** - Fetch and transpile TypeScript to JavaScript:
```ts
const jsCode = await fetchTranspiledJavaScript("https://esm.town/v/username/project/path/to/file.ts");
```

6. **testServer** - Create a test server for running test suites:
```ts
export default testServer([
  {
    name: "Feature Tests",
    tests: [
      {
        name: "should add numbers correctly",
        function: () => {
          expect(1 + 1).toBe(2);
        },
      }
    ],
  }
]);
```

## Val Town Platform Specifics
- **Redirects:** Use `return new Response(null, { status: 302, headers: { Location: "/place/to/redirect" }})` instead of `Response.redirect` which is broken
- **Images:** Avoid external images or base64 images. Use emojis, unicode symbols, or icon fonts/libraries instead
- For AI-generated images, use: `https://maxm-imggenurl.web.val.run/the-description-of-your-image`
- **Storage:** DO NOT use the Deno KV module for storage
- **Browser APIs:** DO NOT use the `alert()`, `prompt()`, or `confirm()` methods
- **Weather Data:** Use open-meteo for weather data (doesn't require API keys) unless otherwise specified
- **View Source:** Add a view source link with `import.meta.url.replace("esm.town", "val.town")` and include `target="_top"` attribute
- **Error Debugging:** Add `<script src="https://esm.town/v/std/catch"></script>` to HTML to capture client-side errors
- **Error Handling:** Only use try...catch when there's a clear local resolution; avoid catches that merely log or return 500s - let errors bubble up with full context
- **Environment Variables:** Use `Deno.env.get('keyname')` and minimize their use - prefer APIs without keys
- **Imports:** Use `https://esm.sh` for npm and Deno dependencies to ensure compatibility on server and browser
- **Storage Strategy:** Only use backend storage if explicitly required; prefer simple static client-side sites
- For persistence, use Val Town SQLite or Blob storage with `import.meta.url` for keys/table names
- **React Configuration:** When using React libraries, pin versions with `?deps=react@18.2.0,react-dom@18.2.0` and include the `@jsxImportSource` pragma
- When facing client-side render issues, check if all React dependencies are pinned to the same version
- **Styling:** Default to using TailwindCSS via `<script src="https://cdn.twind.style" crossorigin></script>` unless otherwise specified

## Project Structure and Design Patterns

### Recommended Directory Structure
```
├── backend/
│   ├── database/
│   │   ├── migrations.ts    # Schema definitions
│   │   ├── queries.ts       # DB query functions
│   │   └── README.md
│   ├── index.ts             # Main entry point
│   └── README.md
├── frontend/
│   ├── components/
│   │   ├── App.tsx
│   │   └── [Component].tsx
│   ├── favicon.svg
│   ├── index.html           # Main HTML template
│   ├── index.tsx            # JS entry point
│   ├── README.md
│   └── style.css
├── README.md
└── shared/
    ├── README.md
    └── utils.ts             # Shared types and functions
```

### Backend (Hono) Best Practices
- Hono is the recommended API framework (similar to Express, Flask, or Sinatra)
- Main entry point should be `backend/index.ts`
- **Static asset serving:** Use the utility functions to read and serve project files:
  ```ts
  // Use the serveFile utility to handle content types automatically
  app.get("/public/*", c => serveFile(c.req.path.replace("/public", "/frontend"), import.meta.url));

  // For index.html, often you'll want to bootstrap with initial data
  app.get("/", async c => {
    let html = await readFile("/frontend/index.html", import.meta.url);

    // Inject data to avoid extra round-trips
    const initialData = await fetchInitialData();
    const dataScript = `<script>
      window.__INITIAL_DATA__ = ${JSON.stringify(initialData)};
    </script>`;

    html = html.replace("</head>", `${dataScript}</head>`);
    return c.html(html);
  });
  ```
- Create RESTful API routes for CRUD operations
- Be careful with error handling as Hono tends to swallow errors
- Always include this snippet at the top-level Hono app to re-throwing errors to see full stack traces:
  ```ts
  // Unwrap Hono errors to see original error details
  app.onError((err, c) => {
    throw err;
  });
  ```

### Frontend Best Practices
- Structure as a standard client-side React app
- Use SVG for favicons (Val Town only supports text files)
- Separate components into individual files
- Access bootstrapped data from `window.__INITIAL_DATA__`
- Use React 18.2.0 consistently in all imports and the `@jsxImportSource` pragma
- Follow the React component pattern from the example project
- Handle API calls properly with proper error catching

### Database Patterns
- Run migrations on startup or comment out for performance
- Change table names when modifying schemas rather than altering
- Export clear query functions with proper TypeScript typing
- Follow the queries and migrations pattern from the example

## Common Gotchas and Solutions

1. **Environment Limitations:**
   - Val Town runs on Deno in a serverless context, not Node.js
   - Code in `shared/` must work in both frontend and backend environments
   - Cannot use `Deno` keyword in shared code
   - Use `https://esm.sh` for imports that work in both environments

2. **SQLite Peculiarities:**
   - Limited support for ALTER TABLE operations
   - Create new tables with updated schemas and copy data when needed
   - Always run table creation before querying

3. **React Configuration:**
   - All React dependencies must be pinned to 18.2.0
   - Always include `@jsxImportSource https://esm.sh/react@18.2.0` at the top of React files
   - Rendering issues often come from mismatched React versions

4. **File Handling:**
   - Val Town only supports text files, not binary
   - Use the provided utilities to read files across branches and forks
   - For files in the project, use `readFile` helpers

5. **API Design:**
   - `fetch` handler is the entry point for HTTP vals
   - Run the Hono app with `export default app.fetch // This is the entry point for HTTP vals`
   - Properly handle CORS if needed for external access