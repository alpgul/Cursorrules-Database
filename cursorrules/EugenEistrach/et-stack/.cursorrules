## Tech Stack

- pnpm
- React 19
- TanStack (Router, Query, Start)
- TypeScript
- SQLite (local) / Turso (production) with Drizzle ORM
- Better-auth with GitHub SSO
- react-hook-form for form handling
- TailwindCSS with shadcn/ui
- trigger.dev for background jobs
- Fly.io for deployment and hosting
- arktype for type-safe validation

## Code Style and Structure

- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer duplicating code over premature abstraction (Write Everything Twice
  principle)
- Use descriptive variable names with auxiliary verbs (e.g., isLoading,
  hasError)

### TypeScript Patterns

- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Use absolute imports with @/ prefix
- Avoid try/catch blocks unless there is good reason to translate or handle
  error in that abstraction
- Return types for functions should be inferred and not explicitly defined
- Use proper TypeScript discriminated unions for message types

## Naming Conventions

- Use lowercase with dashes for directories (e.g., components/form-wizard)
- Favor named exports for components and utilities
- Component files: component-name.tsx
- Backend files:
  - Domain logic: module-name.server.ts
  - API layer: module-name.api.ts
