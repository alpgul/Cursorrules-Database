## Tech Stack

- pnpm
- React 19
- TanStack (Router, Query, Start)
- TypeScript
- SQLite (local) / Turso (production) with Drizzle ORM
- Better-auth with GitHub/Discord SSO
- TailwindCSS with shadcn/ui
- trigger.dev for background jobs
- Fly.io for deployment and hosting
- valibot for type-safe validation

## Code Style and Structure

- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer duplicating code over premature abstraction (Write Everything Twice
  principle)
- Use descriptive variable names with auxiliary verbs (e.g., isLoading,
  hasError)

### TypeScript Patterns

- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Use absolute imports with @/ prefix
- Avoid try/catch blocks unless there's good reason to translate or handle error
  in that abstraction
- Return types for functions should be inferred and not explicitly defined
- Use proper TypeScript discriminated unions for message types

### Repository Structure

```
src/
├── components/     # Shared UI components
├── data/          # Data layer utilities
├── drizzle/       # Database schemas and migrations
├── features/      # Feature-specific code
│   └── feature-name/
│       ├── domain/     # Business logic + DB operations
│       ├── api/        # API layer (server functions + React Query)
│       ├── ui/         # UI components
│       └── templates/  # Templates
├── hooks/         # Shared React hooks
├── lib/           # Shared utilities
├── routes/        # Route components
├── styles/        # Global styles
└── tasks/         # Background tasks
```

## Naming Conventions

- Use lowercase with dashes for directories (e.g., components/form-wizard)
- Favor named exports for components and utilities
- Component files: component-name.tsx
- Backend files:
  - Domain logic: module-name.server.ts
  - API layer: module-name.api.ts
