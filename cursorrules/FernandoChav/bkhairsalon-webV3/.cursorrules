# BK Hair Salon Web - Gu√≠a de Desarrollo

## üéØ Objetivos del Proyecto

- **Calidad sobre velocidad**: C√≥digo mantenible y robusto
- **User Experience First**: Decisiones centradas en el usuario
- **Type Safety**: TypeScript al m√°ximo para prevenir errores
- **Performance**: Optimizar Web Vitals y experiencia m√≥vil
- **Accesibilidad**: WCAG 2.1 AA m√≠nimo
- **Testing**: Cobertura en c√≥digo cr√≠tico

---

## üìê Arquitectura en Capas

### Flujo de Dependencias

```
UI Layer (views/, components/)     ‚Üí Solo renderiza y captura eventos
  ‚Üì
Logic Layer (hooks/)               ‚Üí L√≥gica de negocio y estado
  ‚Üì
Data Layer (clients/, atoms/)      ‚Üí APIs y estado global
  ‚Üì
Domain Layer (models/)             ‚Üí Tipos, schemas, entidades
```

### 1. UI Layer (`views/`, `components/`)

**Responsabilidad √∫nica**: Renderizar y capturar eventos del usuario

#### Reglas CR√çTICAS

- ‚úÖ Delegar toda l√≥gica a hooks custom
- ‚úÖ Calcular valores computados ANTES del return del JSX
- ‚úÖ NO incluir l√≥gica condicional o transformaciones en el JSX
- ‚úÖ Todas las props y retornos de hooks DEBEN usarse
- ‚úÖ NO usar `useState` en componentes de `views/` - extraer a hooks
- ‚úÖ `'use client'` solo cuando sea absolutamente necesario (hooks, providers, interactividad)
- ‚úÖ NO repetir `'use client'` en componentes que heredan de su padre

#### EXCEPCI√ìN: `src/components/`

Los componentes en `src/components/` pueden contener:
- ‚úÖ L√≥gica completa del componente
- ‚úÖ Estado local (`useState`)
- ‚úÖ Handlers y validaciones
- ‚úÖ Transformaciones de datos

**NO permitido** (usar hooks espec√≠ficos):
- ‚ùå Llamadas a APIs (usar `hooks/api/`)
- ‚ùå Estado global (usar atoms de Jotai)
- ‚ùå L√≥gica de negocio compartida entre componentes

#### Ejemplos

```typescript
// ‚úÖ CORRECTO - Computed values antes del JSX
export const RegisterView = () => {
  const { form, handleSubmit, isLoading, isValid } = useRegisterForm();

  const buttonText = isLoading ? 'Creando cuenta...' : 'Crear cuenta';
  const buttonClassName = cn('w-full', isValid ? 'bg-primary' : 'bg-muted');
  const shouldShowError = !isValid && form.formState.isDirty;

  return (
    <form onSubmit={handleSubmit}>
      <Button className={buttonClassName}>{buttonText}</Button>
      {shouldShowError && <ErrorMessage />}
    </form>
  );
};

// ‚ùå INCORRECTO - L√≥gica en el JSX
export const RegisterView = () => {
  const { form, handleSubmit, isLoading, isValid } = useRegisterForm();

  return (
    <form onSubmit={handleSubmit}>
      <Button className={isValid ? 'bg-primary' : 'bg-muted'}>
        {isLoading ? 'Creando cuenta...' : 'Crear cuenta'}
      </Button>
    </form>
  );
};

// ‚úÖ CORRECTO - L√≥gica en hook custom
export const LoginForm = () => {
  const { form, showPassword, isLoading, handleSubmit, handlePasswordToggle } = useLoginForm();

  return (
    <form onSubmit={handleSubmit}>
      <Input type={showPassword ? 'text' : 'password'} />
      <Button onClick={handlePasswordToggle}>
        {showPassword ? 'Ocultar' : 'Mostrar'}
      </Button>
    </form>
  );
};

// ‚ùå INCORRECTO - useState en componente UI
export const LoginForm = () => {
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = (data) => {
    setIsLoading(true);
  };

  return <form onSubmit={handleSubmit}>...</form>;
};
```

#### Directiva 'use client'

```typescript
// ‚úÖ CORRECTO - 'use client' en vista principal
// src/views/app/login/index.tsx
'use client';
export const LoginView: FC = () => {
  const { form, handleSubmit, isLoading } = useLoginView();
  return <LoginForm form={form} handleSubmit={handleSubmit} isLoading={isLoading} />;
};

// ‚úÖ CORRECTO - Componente interno SIN 'use client' (hereda)
// src/views/app/login/components/login-form.tsx
export const LoginForm: FC<LoginFormProps> = ({ form, handleSubmit, isLoading }) => {
  return <form onSubmit={handleSubmit}>...</form>;
};

// ‚úÖ CORRECTO - Hook con 'use client'
'use client';
export const useLoginView = () => {
  const form = useForm<LoginForm>();
  return { form, handleSubmit, isLoading };
};

// ‚ùå INCORRECTO - 'use client' repetitivo
'use client'; // ‚ùå NO necesario, hereda del padre
export const LoginForm: FC<LoginFormProps> = (props) => {
  return <form>...</form>;
};
```

### 2. Logic Layer (`hooks/`)

#### `hooks/api/` - React Query

**Responsabilidad**: Gesti√≥n de estado del servidor (cache, refetch, mutations)

**Convenciones de nombres**:
- Queries: `use[Entity][Action]Query` (ej: `useUserProfileQuery`)
- Mutations: `use[Action][Entity]Mutation` (ej: `useEditUserMutation`)

**Reglas CR√çTICAS**:
- ‚úÖ Solo retornar lo que se usa en consumidores
- ‚úÖ Si un valor no se usa, no exponerlo

```typescript
// ‚úÖ CORRECTO - Solo retorna lo necesario
export const useUserProfileQuery = () => {
  const { data, isLoading, error } = useQuery({
    queryKey: ['user', 'profile'],
    queryFn: fetchProfile,
  });
  return { data, isLoading, error };
};

// ‚ùå INCORRECTO - Retorna todo
export const useUserProfileQuery = () => {
  const queryResult = useQuery({ /* ... */ });
  return queryResult; // ‚ùå Expone propiedades no utilizadas
};
```

#### `hooks/common/` - Hooks de UI

**Responsabilidad**: L√≥gica reutilizable de UI (validaci√≥n, estado local, side effects)

**Convenciones**:
- Nombres: `use[Feature]` (ej: `useFileUpload`, `useToggle`)
- Tipado expl√≠cito de par√°metros y retorno
- Orden de retorno: primero valores, luego handlers

```typescript
// ‚úÖ CORRECTO - Hook con tipado expl√≠cito
interface UseFileUploadParams {
  maxFiles?: number;
  allowedTypes?: string[];
}

interface UseFileUploadReturn {
  files: FileWithPreview[];
  hasFiles: boolean;
  canAddMore: boolean;
  fileCount: number;
  handleAddFiles: (newFiles: FileList | File[]) => void;
  handleRemoveFile: (index: number) => void;
  handleClearFiles: () => void;
}

export const useFileUpload = (params: UseFileUploadParams = {}): UseFileUploadReturn => {
  const { maxFiles = 5, allowedTypes = [] } = params;
  
  return {
    files,
    hasFiles,
    canAddMore,
    fileCount,
    handleAddFiles,
    handleRemoveFile,
    handleClearFiles,
  };
};

// ‚ùå INCORRECTO - Sin tipado expl√≠cito
export const useFileUpload = (maxFiles = 5) => {
  return { files, addFiles, removeFile };
};
```

#### Hooks de formulario (`views/*/hooks/`)

**Responsabilidad**: Orquestar l√≥gica de formularios espec√≠ficos

**Reglas CR√çTICAS**:
- ‚úÖ Relaci√≥n 1:1 con componente principal: `use-[component-name]-form` ‚Üí `[ComponentName]`
- ‚úÖ Solo retornar valores usados por el componente
- ‚úÖ Orden: primero valores, luego handlers

```typescript
// ‚úÖ CORRECTO - Hook de formulario
export const useRegisterForm = () => {
  const form = useForm<RegisterRequest>();
  const { mutate, isPending } = useRegisterMutation();

  const handleSubmit = (data) => {
    mutate(transformData(data));
  };

  return {
    form,
    isLoading: isPending,
    isValid: form.formState.isValid,
    handleSubmit,
  };
};

// ‚ùå INCORRECTO - Expone mutation completo
export const useRegisterForm = () => {
  const form = useForm<RegisterRequest>();
  const mutation = useRegisterMutation();
  return { form, mutation };
};
```

### 3. Data Layer (`clients/`, `atoms/`)

#### `clients/` - HTTP Clients

**Patr√≥n**: Repository Pattern con Axios
- Una clase por recurso/entidad
- Tipar requests y responses con interfaces de `models/`

```typescript
class UserClient {
  async getProfile(): Promise<ApiResponse<ProfileDto>> {
    const response = await baseClient.get<ApiResponse<ProfileDto>>('/user/profile');
    return response.data;
  }
}
```

#### `atoms/` - Estado Global (Jotai)

**Cu√°ndo usar**:
- ‚úÖ Estado compartido entre componentes no relacionados
- ‚ùå NO para estado local o formularios

### 4. Domain Layer (`models/`)

- `schemas/`: Validaci√≥n Zod (`[entity]Schema`)
- `requests/`: DTOs de Request
- `responses/`: DTOs de Response
- `entities/`: Modelos de dominio

---

## üé® Convenciones de C√≥digo

### Nomenclatura

#### Componentes
- **PascalCase**: `UserProfile`, `LoginForm`, `EditUserModal`
- **Sufijos**: `*View`, `*Form`, `*Modal`, `*Card`, `*List`

#### Hooks
- **Prefijo `use` + camelCase**: `useUserProfile`, `useAuth`, `useFileUpload`

#### Variables Booleanas

**CR√çTICO**: Usar prefijo `is` para claridad

**Excepciones** (significado sem√°ntico claro):
- `has*` (ej: `hasServices`, `hasError`)
- `can*` (ej: `canSubmit`, `canEdit`)
- `should*` (ej: `shouldShow`, `shouldRender`)

```typescript
// ‚úÖ CORRECTO
const isOpen = useState(false);
const isLoading = false;
const isValid = form.formState.isValid;
const hasServices = services.length > 0;
const canSubmit = form.formState.isValid;
const shouldShow = !isLoading && hasData;

// ‚ùå INCORRECTO
const open = useState(false);
const loading = false;
const valid = form.formState.isValid;
```

#### Handlers de Eventos

**CR√çTICO**: Siempre usar prefijo `handle` en camelCase
- Patr√≥n: `handle[EventName]` o `handle[Action]`
- Aplica tanto para handlers internos como para props

```typescript
// ‚úÖ CORRECTO
const handleSubmit = (data: FormData) => {};
const handleFileSelect = (files: File[]) => {};
const handlePasswordToggle = () => {};

<EditUserForm
  handleFormSubmit={handleSubmit}
  handlePasswordToggle={handleToggle}
/>

// ‚ùå INCORRECTO
const onSubmit = (data: FormData) => {};
const submitHandler = (data: FormData) => {};

<EditUserForm
  onFormSubmit={handleSubmit}
  onPasswordToggle={handleToggle}
/>
```

#### Constantes
- **UPPER_SNAKE_CASE**: `MAX_FILE_SIZE`, `API_BASE_URL`

#### Tipos/Interfaces
- **PascalCase**: `UserProfile`, `ApiResponse<T>`
- **Sufijos**: `*Props`, `*State`, `*Response`, `*Request`, `*Dto`

### Orden de Elementos

#### En Interfaces

**CR√çTICO**: Primero valores, luego handlers

```typescript
// ‚úÖ CORRECTO
interface EditUserFormProps {
  form: UseFormReturn<EditUserForm>;
  canSubmit: boolean;
  isSubmitting: boolean;
  isLoading: boolean;
  handleFormSubmit: () => void;
  handleReset: () => void;
}

// ‚ùå INCORRECTO
interface EditUserFormProps {
  handleFormSubmit: () => void;
  form: UseFormReturn<EditUserForm>;
  handleReset: () => void;
  canSubmit: boolean;
}
```

#### En Desestructuraci√≥n y Pasaje de Props

**CR√çTICO**: Mantener mismo orden que la interface

```typescript
// ‚úÖ CORRECTO
export const EditUserForm: FC<EditUserFormProps> = ({
  form,
  canSubmit,
  isSubmitting,
  isLoading,
  handleFormSubmit,
  handleReset,
}) => {
  return (
    <form>
      <Button
        isDisabled={!canSubmit}
        isLoading={isSubmitting}
        onClick={handleFormSubmit}
      />
    </form>
  );
};

// Usar componente
<EditUserForm
  form={form}
  canSubmit={canSubmit}
  isSubmitting={isSubmitting}
  isLoading={isLoading}
  handleFormSubmit={handleFormSubmit}
  handleReset={handleReset}
/>
```

#### En Retorno de Hooks

**CR√çTICO**: Primero valores, luego handlers

```typescript
// ‚úÖ CORRECTO
export const useEditUserForm = () => {
  return {
    form,
    profile,
    isLoading,
    canSubmit,
    hasChanges,
    handleSubmit,
    handleReset,
  };
};

// ‚ùå INCORRECTO
export const useEditUserForm = () => {
  return {
    handleSubmit,
    form,
    handleReset,
    isLoading,
  };
};
```

### Exports

**CR√çTICO**: NUNCA usar `export *` - siempre exports expl√≠citos

```typescript
// ‚úÖ CORRECTO
export type { BaseEntity } from './base';
export type { UserRole, UserRoleData } from './role';
export { UserClient } from './user-client';

// ‚ùå INCORRECTO
export * from './role';
export * from './auth';
```

### Imports (orden autom√°tico con Prettier)

1. React
2. Next.js
3. Librer√≠as externas
4. Imports internos (@/)
5. Imports relativos (./, ../)

---

## üîí TypeScript - Type Safety

### Reglas Fundamentales

```typescript
// ‚úÖ CORRECTO
interface User {
  id: string;
  name: string;
}
const user: User = { id: '1', name: 'John' };

// ‚ùå NUNCA usar 'any'
const user: any = { id: '1', name: 'John' };
```

### Type Guards

```typescript
if (error instanceof AxiosError) {
  // TypeScript sabe que error es AxiosError
}
```

### Utility Types

Usar cuando sea apropiado: `Partial<T>`, `Pick<T>`, `Omit<T>`, `Required<T>`

### Validaci√≥n sobre Assertions

```typescript
// ‚ùå EVITAR
const user = data as User;

// ‚úÖ PREFERIR
const user = UserSchema.parse(data);
```

---

## üéØ Principios de Dise√±o

### SOLID

- **Single Responsibility**: Un m√≥dulo = una responsabilidad
- **Open/Closed**: Abierto a extensi√≥n, cerrado a modificaci√≥n
- **Liskov Substitution**: Subcomponentes intercambiables
- **Interface Segregation**: Interfaces espec√≠ficas, no generales (no declarar props innecesarias)
- **Dependency Inversion**: Depender de abstracciones, no implementaciones

### Otros Principios

- **DRY**: Si se repite 3+ veces ‚Üí extraer
- **KISS**: Preferir simplicidad
- **YAGNI**: Solo implementar lo necesario ahora
- **Separation of Concerns**: L√≥gica ‚â† Presentaci√≥n
- **Composition over Inheritance**: Usar composici√≥n en React

---

## üìä Patrones de Dise√±o

### Repository Pattern

```typescript
class UserClient {
  async getAll(): Promise<User[]> {}
  async getById(id: string): Promise<User> {}
  async create(data: CreateUserDto): Promise<User> {}
  async update(id: string, data: UpdateUserDto): Promise<User> {}
  async delete(id: string): Promise<void> {}
}
```

### Custom Hooks Pattern

- Un hook = una responsabilidad
- Hooks pueden componer otros hooks
- Solo retornar lo consumido
- `useState` solo en hooks, no en componentes

### Compound Components (shadcn/ui)

```typescript
<Card>
  <CardHeader>
    <CardTitle>Title</CardTitle>
  </CardHeader>
  <CardContent>Content</CardContent>
</Card>
```

---

## üîÑ Estrategia de Estado

| Tipo | Cu√°ndo usar | Herramienta |
|------|-------------|-------------|
| **Local** | Estado de un solo componente | `useState` (solo en hooks) |
| **Formulario** | Cualquier formulario | `react-hook-form` + Zod |
| **Servidor** | Datos del backend | React Query |
| **Global** | Estado compartido entre componentes no relacionados | Jotai |
| **URL** | Estado que debe persistir en URL | Next.js (searchParams) |

---

## üö® Manejo de Errores

### En Clients

```typescript
// Solo lanzar excepciones, no manejarlas
async create(data: CreateDto): Promise<Response> {
  const response = await baseClient.post('/endpoint', data);
  return response.data;
}
```

### En Hooks (React Query)

```typescript
const { mutate } = useMutation({
  mutationFn: client.create,
  onError: (error: AxiosError<ApiResponse>) => {
    if (isValidationError(error)) {
      extractValidationMessages(error).forEach(toast.error);
    } else {
      toast.error(error.response?.data?.message || 'Error desconocido');
    }
  },
});
```

### En UI

- Mostrar loading states
- Mostrar errores con toast (Sonner)
- Proveer fallbacks UI

---

## üé® UI/UX

### Dise√±o Responsive

**Mobile-first** con breakpoints Tailwind:
- `sm: 640px`
- `md: 768px`
- `lg: 1024px`
- `xl: 1280px`
- `2xl: 1536px`

### Accesibilidad (WCAG 2.1 AA)

- Elementos sem√°nticos HTML
- `aria-labels` cuando sea necesario
- Keyboard navigation funcional
- Focus visible
- Ratios de contraste adecuados

### Estados de Carga

- Siempre mostrar feedback durante operaciones async
- Usar `<LoadingSpinner>` o `<Skeleton>`
- Deshabilitar botones durante loading

### Manejo de Errores

- Mensajes claros y accionables
- Validaci√≥n en tiempo real (onTouched)
- Errores cerca del campo relevante

### Animaciones

- Usar utilities `transition-*` de Tailwind
- Mantener animaciones sutiles (<300ms)
- Respetar `prefers-reduced-motion`

---

## üìä Performance

### Code Splitting

- Next.js lo hace autom√°ticamente
- Usar dynamic imports para componentes pesados

### Optimizaci√≥n de Im√°genes

- Usar `<Image>` de Next.js
- Lazy loading por defecto

### Memoizaci√≥n

- `useMemo` para c√°lculos costosos
- `useCallback` para funciones pasadas a hijos
- `React.memo` para componentes puros

### Bundle Size

```typescript
// ‚úÖ CORRECTO
import { Button } from '@/components/shadcn';

// ‚ùå INCORRECTO
import * as Components from '@/components/shadcn';
```

---

## üîê Seguridad

### Autenticaci√≥n

- Tokens en cookies HTTP-only (NextAuth)
- Refresh tokens autom√°tico
- Validar sesi√≥n en middleware

### Validaci√≥n

- Backend + Frontend (nunca solo client-side)
- Zod para schemas consistentes

### Prevenci√≥n XSS/CSRF

- React escapa autom√°ticamente
- Cuidado con `dangerouslySetInnerHTML`
- NextAuth maneja CSRF tokens

---

## üß™ Testing

### Qu√© Testear

- ‚úÖ L√≥gica de negocio compleja (hooks)
- ‚úÖ Componentes cr√≠ticos
- ‚úÖ Utilidades y helpers
- ‚úÖ Validaciones (schemas Zod)
- ‚ùå Componentes triviales
- ‚ùå C√≥digo generado

### Patr√≥n AAA

```typescript
it('debe registrar usuario exitosamente', async () => {
  // Arrange
  const mockData = { /* ... */ };

  // Act
  const result = await register(mockData);

  // Assert
  expect(result).toEqual(expectedResult);
});
```

---

## üõ†Ô∏è Herramientas y Comandos

### Package Manager: Yarn (NO usar npm)

```bash
yarn install
yarn add [package]
yarn add -D [package]
yarn remove [package]
```

### Desarrollo

```bash
yarn dev              # Servidor de desarrollo
yarn build            # Build de producci√≥n
yarn lint             # Linting
yarn lint:fix         # Fix autom√°tico
yarn type-check       # Verificaci√≥n de tipos
yarn format           # Formatear c√≥digo
yarn test             # Tests modo watch
yarn test:run         # Tests una vez
yarn test:coverage    # Cobertura de tests
yarn knip             # An√°lisis de c√≥digo no usado
```

---

## üìù Documentaci√≥n

### JSDoc

- Documentar funciones/hooks p√∫blicos complejos
- Incluir ejemplos cuando sea √∫til

### Comentarios

```typescript
// ‚úÖ BUEN comentario - explica POR QU√â
// Usamos setTimeout en lugar de useEffect para evitar re-renders
// Ver: https://github.com/facebook/react/issues/14920

// ‚ùå MAL comentario - explica QU√â (obvio)
// Incrementa el contador
count++;
```

---

## ‚ö†Ô∏è Errores Comunes a Evitar

1. Usar `any` - rompe type safety
2. Fetch directo en componentes - usar React Query hooks
3. L√≥gica en componentes UI - extraer a hooks
4. `useState` en componentes UI - extraer a hooks (excepto `src/components/`)
5. Olvidar loading/error states
6. Usar √≠ndices como keys - usar IDs √∫nicos
7. Abusar de `useEffect` - considerar alternativas
8. Mezclar inline styles con Tailwind
9. Hardcodear strings repetidos - usar constantes
10. Ignorar warnings del linter
11. Sobre-optimizar prematuramente
12. L√≥gica en JSX - calcular antes del return
13. Props no utilizadas - solo declarar lo necesario
14. Retornos no utilizados - solo retornar lo usado
15. Prefijo `on` en handlers - usar `handle`
16. Orden mezclado en exports de hooks
17. Usar `npm` en lugar de `yarn`
18. Hooks sobrecargados - mantener relaci√≥n 1:1
19. Variables booleanas sin `is` (excepto sem√°ntica clara)
20. `'use client'` repetitivo
21. Orden mezclado en interfaces/props
22. Usar `export *` - especificar exports
23. Hooks sin tipado expl√≠cito

---

## ‚úÖ Checklist Pre-Commit

- [ ] No hay `any` en el c√≥digo
- [ ] Todas las props declaradas se usan
- [ ] Todo lo que retorna un hook se usa
- [ ] Computed values antes del return del JSX
- [ ] Handlers con patr√≥n `handle[EventName]`
- [ ] No hay l√≥gica en el JSX
- [ ] No hay `useState` en componentes UI (excepto `src/components/`)
- [ ] Variables booleanas con `is` (o sem√°ntica clara)
- [ ] `'use client'` solo cuando sea necesario
- [ ] Interfaces/props ordenadas: valores, luego handlers
- [ ] No hay `export *` - todos expl√≠citos
- [ ] Hooks con tipado expl√≠cito
- [ ] `yarn lint` pasa sin errores
- [ ] `yarn type-check` pasa sin errores
- [ ] Tests agregados/actualizados
- [ ] C√≥digo formateado con Prettier

---

## üéØ Reglas de Oro

1. **Computed values primero, JSX despu√©s**
2. **Solo declarar lo que se usa**
3. **Handlers: `handle[EventName]` siempre**
4. **Hooks y props: primero valores, luego handlers**
5. **Un componente = una responsabilidad**
6. **L√≥gica en hooks, no en componentes**
7. **`useState` solo en hooks** (excepto `src/components/`)
8. **Un hook = un componente (relaci√≥n 1:1)**
9. **Type safety siempre, `any` nunca**
10. **Usar `yarn`, no `npm`**
11. **Variables booleanas: `is[State]` o sem√°ntica clara**
12. **`'use client'` solo cuando sea necesario**
13. **Interfaces ordenadas: valores ‚Üí handlers**
14. **Hooks con tipado expl√≠cito**
15. **Mobile-first en todo momento**
16. **Accesibilidad no es opcional**
17. **Testear l√≥gica cr√≠tica**
18. **Exports siempre expl√≠citos**

---

## üìö Recursos

- [Next.js Docs](https://nextjs.org/docs)
- [React Query Docs](https://tanstack.com/query/latest)
- [shadcn/ui](https://ui.shadcn.com/)
- [TypeScript Deep Dive](https://basarat.gitbook.io/typescript/)
- [Refactoring UI](https://www.refactoringui.com/)