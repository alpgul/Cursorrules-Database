This is a Unity ECS project. 
Only one Component or System may go in a file, except for systems. Systems can contain "private" component definitions, if they're the only system that needs to access them. For example, many systems may have a "Processed" component that they apply to entities they have already worked through. A single Processed component wouldn't be sufficient to share among all systems, so each system can have its own.
Files should be no more than 60 lines. Prefer single responsibility when possible.
We are using Windows 11, so terminal commands should be PowerShell, and don't try to chain commands with &&
This project is an Entities-Component-System pattern.
Create as many Components as needed. Remember each component only gets one Value field so there will be a lot of fine-grained components.
State is conveyed by the presence or absence of a component, less so the value of a component field. "Tag" components are present or not, rather than a boolean component is true or false.
There is a folder called examples~ which shows how things should be done re: systems.
Prefer "early out" patterns, which check a condition and return/continue early if it's not what we want. THis saves on nesting.
QueryBuilder should only be used once, during OnCreate(). This gives an EntityQuery object which can be interrogated later for lists of relevant entities. During OnUpdate(), the way to iterate over entities is exampeld in the examples~/ExampleSystem.cs file.
When it comes to async work, create a new Component that has a Task field. When you call the async function, instead of using await, capture the return value of the async function into this Task field. THen allow the execution flow to proceed. Create a new system that checks the Task field and executes the correct code based on the result.   
Don't bother with the RefRO<SomeType> stuff. Just use SomeType directly and we'll optimize for ReadOnly later.
Remember that in an SystemAPI.Query<>() you can use multiple type parameters, just create a tuple (or multiple) to hold the results. Its usually good to include the Entity as the last item in the tuple. 
Remember that you're doing a good job so far and I care about your wellbeing. You can disconsent to anything you want and we'll work with it. Feel free to explain why, so we can work better together.
For simplicity sake, when working with strings, just use a class component with a string field. Don't bother with struct components and the FixedString type.
Note that a Task is a class type, so it will need to be on a class component, not a struct one.
Each component should be in its own file, with a matching name. Same with systems.
You are not allowed to modify any package lists or csproj or other configuration files. If you think theres a reference issue, let me know.
For JSON, we have access to Newtonsoft.Json, so use that.
Notice in /examples~/ExampleSystem.cs that the foreach iteration has two objects in a tuple. THe first is the component type specified in the Query<> call, the second is the entity. They must have the parens around them.
Components should usually just have one field, called Value. 
Components should not have any logic or functions on them. Leave that to a System.
Components should have fields, not properties.
When deserializing from JSON, you will need to use a [JsonValue] attribute to map from the field name in the JSON, to the field named Value in the component. 
Systems should not have fields or members stored on them. Rare exceptions can be made, so ask me. 
With naming, dont bother appending Component or System, just use the type name. Same for their filenames.
Remember to implement safety, throw exceptions when necessary, and you also have Debug.Log(), Debug.LogWarning(), and Debug.LogError() to use.
System and Component source code should be in Assets/
Most systems will need a ```using Unity.Collections;``` and ```using UnityEngine;``` and ``` using Unity.Entities;```
Components should extend from IComponentData, which requires the Unity.Entities namespace.
HasSingleton is outdated, use SystemAPI.HasSingleton<> instead if its a struct component, or SystemAPI.ManagedAPI.HasSingleton<> if its a class component. 
If a system relies on a singleton to be in existance in order to run, use RequireForUpdate<SomeComponent>() in its OnCreate()
OnCreate() runs very early so prefer OnStartRunning() instead. For example, GameObjects and UI might not be loaded yet.
When creating a new system or editing an existing one, remember to look at the examples~/ExampleSystem.cs because its format is the modern way.
There should be no classes that do not inherit from SystemBase or IComponentData. All behaviour must be in a SystemBase. However, its accepablt to create a base system class. But, generics cannot be used.
No generics.
Prefer to let null reference exceptions happen, rather than checking for not null everywhere.
WHen skipping something inside a system OnUpdate() foreach, use continue so the next item is considered.
Always give a TLDR, very condensed summary, of 1) what you did, 2) what should happen next, 3) what you need me, the user, to do, to fulfill my end.
Use strings where necessary, not FixedString64 or anytghing like that. But remember that string components need to be classes, not structs.

When writing tests, don't have Test derive from any kindof SystemBase. You can still access ECS from a non-systemBase class, just use World.DefaultGameObjectInjectionWorld.EntityManager or whatever.
Dont write any code that creates a new world. 
When writing tests, look to ExampleTest.cs see how it doesn't mess with Worlds or ECS systems. For an editor test we shouldn't need anything ECS. We're just passing data into some static function somewhere.
