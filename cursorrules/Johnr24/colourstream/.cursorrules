backend prisma is in - cd /Users/john/myapps/colourstream/backend && npx prisma generate


FRONTEND CHANGE VERIFICATION RULE:
1. Code Inspection Stage:
   - Check the current implementation in the codebase
   - Verify where changes need to be made
   - Understand the component structure and dependencies
2. Implementation Stage:
   - Make the necessary code changes
   - Verify changes are in the correct files using grep or file inspection
   - Run any necessary linting/type checks
3. Deployment Stage:
   - For Docker deployments, which this repository is, run the following command to rebuild the frontend container:
     * Rebuild the frontend container: `docker-compose up -d --build frontend`
     * Check container logs for any errors

# Traefik Configuration Rule
IF You need to break this rule, explain clearly and exactly why and wait for a confirmation 
## Purpose
This rule ensures consistent Traefik routing configuration across the ColourStream application by using container labels instead of external Traefik configurations.

## Procedure
1. Always use container labels in docker-compose.yml for Traefik routing:
   - DO NOT use external Traefik configuration files (e.g., traefik.toml, traefik.yaml)
   - DO USE DOCKER COMPOSE LABELS
   - DO use service-level labels for all routing configuration

2. Required label structure for Traefik routing:
   - Define router rules using `traefik.http.routers.[service-name].rule`
   - Define entrypoints using `traefik.http.routers.[service-name].entrypoints`
   - Define TLS configuration using `traefik.http.routers.[service-name].tls`
   - Define middlewares using `traefik.http.routers.[service-name].middlewares`
   - Define services using `traefik.http.services.[service-name].loadbalancer.server.port`

3. Example of correct implementation:
   ```yaml
   services:
     frontend:
       # ... other configuration
       labels:
         - "traefik.enable=true"
         - "traefik.http.routers.frontend.rule=Host(`app.colourstream.example.com`)"
         - "traefik.http.routers.frontend.entrypoints=websecure"
         - "traefik.http.routers.frontend.tls=true"
         - "traefik.http.services.frontend.loadbalancer.server.port=3000"
   ```

4. When adding a new service:
   - Always include appropriate traefik labels
   - Ensure unique router and service names
   - Document the routing configuration in service comments

5. When modifying existing services:
   - Maintain the same label structure
   - Update labels as needed for new routing requirements
   - Test routing changes before deployment

## Benefits
- Centralized configuration in docker-compose.yml
- Easier maintenance and troubleshooting
- Consistent deployment across environments
- Better visibility of routing configuration
- Simplified CI/CD pipeline



# Casing and Naming Conventions Rule

## Purpose
This rule ensures consistent naming conventions across the ColourStream codebase, improving readability, maintainability, and reducing errors related to inconsistent casing.

## General Principles
- Be consistent within each file and across related files
- Choose meaningful, descriptive names that indicate purpose
- Avoid abbreviations unless they are widely understood
- Prioritize readability over brevity

## TypeScript/JavaScript Conventions

### Variables and Functions
- Use camelCase for variables, function names, method names, and instance properties
  - Example: `getUserData`, `isAuthenticated`, `roomConfig`
- Use PascalCase for class names, interfaces, types, and React components
  - Example: `UserProfile`, `AuthService`, `RoomConfig`
- Use UPPER_SNAKE_CASE for constants and environment variables
  - Example: `MAX_RETRY_ATTEMPTS`, `API_BASE_URL`

### Files and Directories
- Use PascalCase for React component files
  - Example: `AdminDashboard.tsx`, `ProtectedRoute.tsx`
- Use camelCase for utility and service files
  - Example: `api.ts`, `websocket.ts`
- Use camelCase for directory names in the src folder
  - Example: `components`, `utils`, `hooks`

### React Components
- Use PascalCase for component file names and the component itself
  - Example: `UserProfile.tsx` contains `const UserProfile: React.FC = () => {...}`
- Use camelCase for custom hooks, starting with "use"
  - Example: `useAuth`, `useRoomData`

## Database and Prisma Conventions

### Model Names
- Use mixed casing for model names in Prisma schema based on entity type:
  - Use PascalCase for primary entities (e.g., `Room`, `WebAuthnCredential`)
  - Use camelCase for configuration or settings entities (e.g., `obssettings`, `blockedIP`)
- Ensure consistency between Prisma model names and their usage in code

### Field Names
- Use camelCase for field names in database models
  - Example: `userId`, `createdAt`, `streamKey`
- Use consistent naming patterns for related fields across models

## API Conventions

### Endpoints
- Use kebab-case for API endpoints
  - Example: `/api/user-profile`, `/api/room-settings`
- Use RESTful naming conventions for CRUD operations

### Request/Response Objects
- Use PascalCase for interface/type names
  - Example: `UserProfileResponse`, `RoomCreateRequest`
- Use camelCase for properties within these objects
  - Example: `{ userId: string, displayName: string }`

## Implementation
1. When creating new code:
   - Follow these conventions from the start
   - Reference existing code with consistent naming

2. When modifying existing code:
   - Match the existing style if it's consistent
   - If inconsistent, consider refactoring for consistency
   - Document any necessary deviations

3. When refactoring for consistency:
   - Make focused changes in a dedicated PR
   - Update all references to renamed entities
   - Test thoroughly to ensure no regressions

## Exceptions
- External libraries or frameworks may require different conventions
- Legacy code may maintain its conventions until scheduled refactoring
- Document any exceptions in comments for clarity