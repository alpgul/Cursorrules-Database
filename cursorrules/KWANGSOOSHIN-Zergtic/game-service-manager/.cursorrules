# 프로젝트 개발 가이드라인

## 0. 핵심 지침
- 요청이 들어올때 요청이 모호하면 재질문을 통해서 요청사항을 명확하게 해야 합니다.
- 요청은 핵심 요청을 기본으로 하여 Json 형식의 고급 프롬프트화 되어 질문 되어야 합니다.
- 코드는 철저한 함수화 컴포넌트화 로 작업 되어야 합니다
- 작성된 코드는 Unit Test 및 E2E Test 를 작성 하여야 합니다 
- Test 는 src/test 폴더 내에 작성 되어야 합니다. 
- Test 데이터는 src/test/test-data 폴더 내에 작성 되어야 합니다.
- Test Jest 를 통해서 실행 되어야 합니다.
- 테스트 실행시 오류가 발생하면 관련 오류를 반드시 수정하여야 합니다.
- 요청에 필요한 라이브러리나 패키지, 컴포넌트들은 요청시 모두 설치 되어야 합니다.
- 설치된 항목은 '/dosc/gm-tool-project-setup.md'에 목적과, 설치 방법이 기재 되어야 합니다.

## 1. 컴포넌트 가이드라인

### 패키지 매니저: npm 사용
- 모든 패키지 설치 및 관리는 npm을 사용하세요.

### Next.js 개발: Route Handler 우선 사용
- 모든 API 엔드포인트는 Route Handler를 사용하여 구현하세요.
- 데이터베이스 작업, 외부 API 호출, 인증 등 복잡한 서버 작업은 반드시 Route Handler를 사용하세요.
- Server Action은 단순 폼 제출 또는 간단한 데이터 처리에만 사용하세요.

### TypeScript 사용: TS 사용 권장
- 프로젝트 전반에 TypeScript를 사용하세요.
- 타입 안정성을 위해 모든 컴포넌트와 서버 로직에 TypeScript를 적용하세요.

### TypeScript 인터페이스 정의 규칙: 'I' 접두사 사용
- 인터페이스 정의 시 이름 앞에 'I'를 접두사로 추가하세요.
- 예시:
  ```typescript
  export interface IComment {
      id: string
      text: string
      author: string
  }
  ```
### Next.js 라우팅: App Router 사용
- 프로젝트 내 라우팅은 Pages Router 대신 App Router를 사용하세요.

### ShadCN Components
- 모든 UI 컴포넌트는 ShadCN을 사용해야 합니다.
- 컴포넌트 사용 전 설치 여부를 확인해야 합니다: '/components/ui' 디렉토리 체크
- 컴포넌트 설치 명령어를 사용해야 합니다: 'npx shadcn@latest add [component—name]'
    - 주의: 'npx shadcn—ui@latest add' 명령어는 deprecated. 반드시 'npx shadcn@latest add'를 사용해야 합니다.

### lcons
- 모든 아이콘은 Lucide React를 사용해야 합니다
- 아이콘 임포트 방법: 'import { IconName } from "lucide—react"'
- 예시: 'import { Search, Menu } from "lucide—react"'
- 카타고리 정보, String 출력 정보중 아이콘의 사용이 필요한 단어들은 아이콘을 같이 사용하여 표시합니다.

### Component Structure

- 컴포넌트는 '/components' 디렉토리 내에 위치해야 합니다
- UI 컴포넌트는 '/components/ui' 디렉토리에 위치해야 합니다
- 페이지별 컴포넌트는 '/app' 디렉토리 내 해당 라우트에 위치해야 합니다

## 프로그램 실행 및 테스트
- jest test 를 제외한 직접 실행 테스트의 경우 아래의 조건을 준수 해야 합니다.
- 프로그램 실행 명령어: 'npm run dev'
- 프로그램 실행 후 접속 주소: 'http://localhost:3000'
- 개발용 포트인 3000 포트를 사용하여 실행 해야 합니다.
- 만약 3000번 포트가 이미 실행 중이면 종료후 실행 하여야 합니다