# 调试和问题解决指南

## 调试工具配置

### Vue DevTools 配置
```typescript
// main.ts - 开发环境启用Vue DevTools
import { createApp } from 'vue'
import App from './App.vue'

const app = createApp(App)

// 开发环境配置
if (import.meta.env.DEV) {
  // 启用Vue DevTools
  app.config.devtools = true
  
  // 启用性能追踪
  app.config.performance = true
  
  // 全局错误处理
  app.config.errorHandler = (err, vm, info) => {
    console.error('Vue Error:', err)
    console.error('Component:', vm)
    console.error('Error Info:', info)
  }
  
  // 全局警告处理
  app.config.warnHandler = (msg, vm, trace) => {
    console.warn('Vue Warning:', msg)
    console.warn('Component:', vm)
    console.warn('Trace:', trace)
  }
}

app.mount('#app')
```

### 浏览器调试配置
```typescript
// utils/debug.ts
export class DebugHelper {
  private static instance: DebugHelper
  private debugMode: boolean
  
  constructor() {
    this.debugMode = import.meta.env.DEV || localStorage.getItem('debug') === 'true'
  }
  
  static getInstance(): DebugHelper {
    if (!DebugHelper.instance) {
      DebugHelper.instance = new DebugHelper()
    }
    return DebugHelper.instance
  }
  
  /**
   * 启用调试模式
   */
  enable(): void {
    this.debugMode = true
    localStorage.setItem('debug', 'true')
    console.log('🐛 调试模式已启用')
  }
  
  /**
   * 禁用调试模式
   */
  disable(): void {
    this.debugMode = false
    localStorage.removeItem('debug')
    console.log('🐛 调试模式已禁用')
  }
  
  /**
   * 调试日志
   */
  log(message: string, ...args: any[]): void {
    if (this.debugMode) {
      console.log(`🐛 [DEBUG] ${message}`, ...args)
    }
  }
  
  /**
   * 调试信息
   */
  info(message: string, ...args: any[]): void {
    if (this.debugMode) {
      console.info(`ℹ️ [INFO] ${message}`, ...args)
    }
  }
  
  /**
   * 调试警告
   */
  warn(message: string, ...args: any[]): void {
    if (this.debugMode) {
      console.warn(`⚠️ [WARN] ${message}`, ...args)
    }
  }
  
  /**
   * 调试错误
   */
  error(message: string, ...args: any[]): void {
    if (this.debugMode) {
      console.error(`❌ [ERROR] ${message}`, ...args)
    }
  }
  
  /**
   * 性能测量
   */
  time(label: string): void {
    if (this.debugMode) {
      console.time(`⏱️ [PERF] ${label}`)
    }
  }
  
  timeEnd(label: string): void {
    if (this.debugMode) {
      console.timeEnd(`⏱️ [PERF] ${label}`)
    }
  }
  
  /**
   * 追踪函数调用
   */
  trace(message?: string): void {
    if (this.debugMode) {
      console.trace(`📍 [TRACE] ${message || ''}`)
    }
  }
  
  /**
   * 组件状态快照
   */
  snapshot(label: string, data: any): void {
    if (this.debugMode) {
      console.group(`📸 [SNAPSHOT] ${label}`)
      console.log(JSON.parse(JSON.stringify(data)))
      console.groupEnd()
    }
  }
}

// 全局调试实例
export const debug = DebugHelper.getInstance()

// 在window上暴露调试工具（仅开发环境）
if (import.meta.env.DEV) {
  (window as any).debug = debug
}
```

## 常见问题诊断

### 系统性Bug分析模式
```typescript
// composables/useBugAnalysis.ts
export function useBugAnalysis() {
  /**
   * 系统性分析bug产生的根本原因
   */
  const analyzeRootCause = (error: Error, context: any) => {
    const analysis = {
      timestamp: new Date().toISOString(),
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      },
      context,
      environment: {
        userAgent: navigator.userAgent,
        url: window.location.href,
        viewport: {
          width: window.innerWidth,
          height: window.innerHeight
        },
        memory: (performance as any).memory || null
      },
      hypotheses: [] as string[],
      solutions: [] as string[]
    }
    
    // 分析可能的原因
    if (error.message.includes('undefined')) {
      analysis.hypotheses.push('变量未定义或属性不存在')
      analysis.solutions.push('检查变量初始化和对象属性')
    }
    
    if (error.message.includes('network')) {
      analysis.hypotheses.push('网络连接问题')
      analysis.solutions.push('检查API端点和网络状态')
    }
    
    if (error.stack?.includes('reactive')) {
      analysis.hypotheses.push('Vue响应式数据问题')
      analysis.solutions.push('检查响应式数据的正确使用')
    }
    
    return analysis
  }
  
  /**
   * 提供三种不同的解决方案
   */
  const provideSolutions = (errorType: string) => {
    const solutions = {
      'undefined_error': [
        {
          title: '防御性编程',
          description: '使用可选链操作符和默认值',
          code: 'const value = data?.user?.name ?? "默认值"',
          pros: ['安全性高', '代码简洁'],
          cons: ['可能隐藏真正的问题']
        },
        {
          title: '类型检查',
          description: '加强TypeScript类型检查',
          code: 'interface User { name: string }',
          pros: ['编译期发现问题', '代码更健壮'],
          cons: ['增加开发复杂度']
        },
        {
          title: '运行时验证',
          description: '添加运行时数据验证',
          code: 'if (typeof data === "object" && data !== null)',
          pros: ['运行时安全', '错误信息明确'],
          cons: ['性能开销']
        }
      ],
      'network_error': [
        {
          title: '重试机制',
          description: '实现指数退避重试',
          code: 'await retry(apiCall, { retries: 3 })',
          pros: ['提高成功率', '用户体验好'],
          cons: ['可能延长响应时间']
        },
        {
          title: '离线支持',
          description: '实现离线缓存机制',
          code: 'serviceWorker.cache(request)',
          pros: ['离线可用', '性能提升'],
          cons: ['实现复杂', '缓存管理']
        },
        {
          title: '降级方案',
          description: '提供备用数据源',
          code: 'fallbackData || cachedData',
          pros: ['服务可用性高', '用户体验连续'],
          cons: ['数据可能不是最新']
        }
      ]
    }
    
    return solutions[errorType] || []
  }
  
  return {
    analyzeRootCause,
    provideSolutions
  }
}
```

### Vue相关问题调试

#### 响应式数据问题
```typescript
// 调试响应式数据
export function debugReactivity() {
  const { effect, trigger, track } = Vue
  
  // 追踪响应式依赖
  const trackDependencies = (obj: any, path = '') => {
    if (typeof obj !== 'object' || obj === null) return
    
    Object.keys(obj).forEach(key => {
      const fullPath = path ? `${path}.${key}` : key
      console.log(`📌 Tracking: ${fullPath}`)
      
      if (typeof obj[key] === 'object') {
        trackDependencies(obj[key], fullPath)
      }
    })
  }
  
  // 检查响应式丢失
  const checkReactivityLoss = (data: any) => {
    const issues = []
    
    // 检查是否是响应式对象
    if (!Vue.isReactive(data) && !Vue.isRef(data)) {
      issues.push('数据不是响应式的，使用reactive()或ref()包装')
    }
    
    // 检查解构是否破坏响应式
    if (typeof data === 'object') {
      Object.keys(data).forEach(key => {
        if (typeof data[key] === 'object' && !Vue.isReactive(data[key])) {
          issues.push(`属性 ${key} 失去响应式，避免解构赋值`)
        }
      })
    }
    
    return issues
  }
  
  return {
    trackDependencies,
    checkReactivityLoss
  }
}
```

#### 组件通信问题
```typescript
// 调试组件通信
export function debugComponentCommunication() {
  // Props传递调试
  const debugProps = (props: any, expectedProps: string[]) => {
    const issues = []
    
    expectedProps.forEach(prop => {
      if (!(prop in props)) {
        issues.push(`缺少必要的prop: ${prop}`)
      } else if (props[prop] === undefined) {
        issues.push(`prop ${prop} 的值为undefined`)
      }
    })
    
    // 检查意外的props
    Object.keys(props).forEach(prop => {
      if (!expectedProps.includes(prop)) {
        console.warn(`⚠️ 意外的prop: ${prop}`)
      }
    })
    
    return issues
  }
  
  // 事件发射调试
  const debugEmits = (emitFn: Function, eventName: string, payload?: any) => {
    console.log(`📤 Emitting event: ${eventName}`, payload)
    try {
      emitFn(eventName, payload)
      console.log(`✅ Event ${eventName} emitted successfully`)
    } catch (error) {
      console.error(`❌ Failed to emit event ${eventName}:`, error)
    }
  }
  
  return {
    debugProps,
    debugEmits
  }
}
```

### 性能问题诊断

#### 渲染性能分析
```typescript
// composables/usePerformanceAnalysis.ts
export function usePerformanceAnalysis() {
  const measureRenderTime = (componentName: string) => {
    const startTime = performance.now()
    
    onMounted(() => {
      const endTime = performance.now()
      const renderTime = endTime - startTime
      
      if (renderTime > 100) {
        console.warn(`⚠️ 组件 ${componentName} 渲染时间过长: ${renderTime.toFixed(2)}ms`)
      } else {
        console.log(`✅ 组件 ${componentName} 渲染时间: ${renderTime.toFixed(2)}ms`)
      }
    })
  }
  
  const analyzeMemoryUsage = () => {
    if ('memory' in performance) {
      const memory = (performance as any).memory
      return {
        used: Math.round(memory.usedJSHeapSize / 1048576),
        total: Math.round(memory.totalJSHeapSize / 1048576),
        limit: Math.round(memory.jsHeapSizeLimit / 1048576)
      }
    }
    return null
  }
  
  const detectMemoryLeaks = () => {
    const samples = []
    let interval: number
    
    const start = () => {
      interval = setInterval(() => {
        const memory = analyzeMemoryUsage()
        if (memory) {
          samples.push({
            timestamp: Date.now(),
            memory: memory.used
          })
          
          // 保留最近10个样本
          if (samples.length > 10) {
            samples.shift()
          }
          
          // 检查内存是否持续增长
          if (samples.length >= 5) {
            const trend = samples.slice(-5)
            const increasing = trend.every((sample, index) => 
              index === 0 || sample.memory >= trend[index - 1].memory
            )
            
            if (increasing) {
              console.warn('⚠️ 检测到可能的内存泄漏')
            }
          }
        }
      }, 5000)
    }
    
    const stop = () => {
      if (interval) {
        clearInterval(interval)
      }
    }
    
    return { start, stop, samples }
  }
  
  return {
    measureRenderTime,
    analyzeMemoryUsage,
    detectMemoryLeaks
  }
}
```

### 网络请求调试

#### API调试工具
```typescript
// utils/apiDebugger.ts
export class ApiDebugger {
  private requests: Map<string, any> = new Map()
  
  /**
   * 拦截请求
   */
  interceptRequest(config: any) {
    const requestId = this.generateRequestId()
    const requestInfo = {
      id: requestId,
      url: config.url,
      method: config.method,
      headers: config.headers,
      data: config.data,
      timestamp: Date.now(),
      status: 'pending'
    }
    
    this.requests.set(requestId, requestInfo)
    
    console.group(`📤 API Request: ${config.method?.toUpperCase()} ${config.url}`)
    console.log('Request ID:', requestId)
    console.log('Headers:', config.headers)
    console.log('Data:', config.data)
    console.groupEnd()
    
    return { ...config, requestId }
  }
  
  /**
   * 拦截响应
   */
  interceptResponse(response: any) {
    const requestId = response.config?.requestId
    if (requestId && this.requests.has(requestId)) {
      const requestInfo = this.requests.get(requestId)
      requestInfo.status = 'success'
      requestInfo.responseTime = Date.now() - requestInfo.timestamp
      requestInfo.response = {
        status: response.status,
        data: response.data,
        headers: response.headers
      }
      
      console.group(`📥 API Response: ${requestInfo.method?.toUpperCase()} ${requestInfo.url}`)
      console.log('Request ID:', requestId)
      console.log('Status:', response.status)
      console.log('Response Time:', `${requestInfo.responseTime}ms`)
      console.log('Data:', response.data)
      console.groupEnd()
      
      // 性能警告
      if (requestInfo.responseTime > 3000) {
        console.warn(`⚠️ 慢请求: ${requestInfo.url} (${requestInfo.responseTime}ms)`)
      }
    }
    
    return response
  }
  
  /**
   * 拦截错误
   */
  interceptError(error: any) {
    const requestId = error.config?.requestId
    if (requestId && this.requests.has(requestId)) {
      const requestInfo = this.requests.get(requestId)
      requestInfo.status = 'error'
      requestInfo.responseTime = Date.now() - requestInfo.timestamp
      requestInfo.error = {
        message: error.message,
        code: error.code,
        response: error.response
      }
      
      console.group(`❌ API Error: ${requestInfo.method?.toUpperCase()} ${requestInfo.url}`)
      console.log('Request ID:', requestId)
      console.log('Error:', error.message)
      console.log('Response:', error.response)
      console.groupEnd()
    }
    
    return Promise.reject(error)
  }
  
  /**
   * 获取请求统计
   */
  getRequestStats() {
    const requests = Array.from(this.requests.values())
    const stats = {
      total: requests.length,
      success: requests.filter(r => r.status === 'success').length,
      error: requests.filter(r => r.status === 'error').length,
      pending: requests.filter(r => r.status === 'pending').length,
      averageResponseTime: 0,
      slowRequests: requests.filter(r => r.responseTime > 3000)
    }
    
    const completedRequests = requests.filter(r => r.responseTime)
    if (completedRequests.length > 0) {
      stats.averageResponseTime = completedRequests.reduce(
        (sum, r) => sum + r.responseTime, 0
      ) / completedRequests.length
    }
    
    return stats
  }
  
  private generateRequestId(): string {
    return Math.random().toString(36).substr(2, 9)
  }
}

// 全局API调试器实例
export const apiDebugger = new ApiDebugger()
```

## 错误处理策略

### 全局错误处理
```typescript
// plugins/errorHandler.ts
interface ErrorInfo {
  error: Error
  errorInfo: string
  componentStack?: string
  context?: any
}

export class GlobalErrorHandler {
  private errorQueue: ErrorInfo[] = []
  private maxErrors = 50
  
  constructor() {
    this.setupGlobalHandlers()
  }
  
  private setupGlobalHandlers() {
    // 处理未捕获的JavaScript错误
    window.addEventListener('error', (event) => {
      this.handleError({
        error: event.error || new Error(event.message),
        errorInfo: `Script error at ${event.filename}:${event.lineno}:${event.colno}`,
        context: {
          filename: event.filename,
          lineno: event.lineno,
          colno: event.colno
        }
      })
    })
    
    // 处理未捕获的Promise拒绝
    window.addEventListener('unhandledrejection', (event) => {
      this.handleError({
        error: new Error(event.reason?.message || 'Unhandled Promise Rejection'),
        errorInfo: 'Unhandled Promise Rejection',
        context: {
          reason: event.reason,
          promise: event.promise
        }
      })
    })
  }
  
  handleError(errorInfo: ErrorInfo) {
    // 添加到错误队列
    this.errorQueue.push({
      ...errorInfo,
      timestamp: new Date().toISOString()
    })
    
    // 限制错误队列大小
    if (this.errorQueue.length > this.maxErrors) {
      this.errorQueue.shift()
    }
    
    // 控制台输出
    console.group('❌ Global Error')
    console.error('Error:', errorInfo.error)
    console.error('Info:', errorInfo.errorInfo)
    if (errorInfo.componentStack) {
      console.error('Component Stack:', errorInfo.componentStack)
    }
    if (errorInfo.context) {
      console.error('Context:', errorInfo.context)
    }
    console.groupEnd()
    
    // 发送到监控服务
    this.reportError(errorInfo)
  }
  
  private async reportError(errorInfo: ErrorInfo) {
    try {
      // 发送到Sentry或其他错误监控服务
      if (window.Sentry) {
        window.Sentry.captureException(errorInfo.error, {
          contexts: {
            errorInfo: errorInfo.errorInfo,
            customContext: errorInfo.context
          }
        })
      }
    } catch (err) {
      console.error('Failed to report error:', err)
    }
  }
  
  getErrorHistory() {
    return [...this.errorQueue]
  }
  
  clearErrorHistory() {
    this.errorQueue.length = 0
  }
}
```

## 调试技巧和最佳实践

### 开发环境调试技巧
```typescript
// 开发环境调试助手
export const devHelper = {
  // 查看组件状态
  inspectComponent(vm: any) {
    if (import.meta.env.DEV) {
      console.log('📊 Component State:', {
        props: vm.$props,
        data: vm.$data,
        computed: Object.keys(vm.$options.computed || {}),
        methods: Object.keys(vm.$options.methods || {}),
        refs: vm.$refs
      })
    }
  },
  
  // 查看Store状态
  inspectStore(store: any) {
    if (import.meta.env.DEV) {
      console.log('🏪 Store State:', {
        state: store.$state,
        getters: Object.keys(store._getters || {}),
        actions: Object.keys(store._actions || {})
      })
    }
  },
  
  // 模拟网络延迟
  async simulateNetworkDelay(ms: number = 1000) {
    if (import.meta.env.DEV) {
      console.log(`⏳ Simulating ${ms}ms network delay`)
      await new Promise(resolve => setTimeout(resolve, ms))
    }
  },
  
  // 模拟错误
  simulateError(message: string = 'Simulated error') {
    if (import.meta.env.DEV) {
      throw new Error(message)
    }
  },
  
  // 性能标记
  mark(name: string) {
    if (import.meta.env.DEV && 'performance' in window) {
      performance.mark(name)
      console.log(`📍 Performance mark: ${name}`)
    }
  },
  
  // 性能测量
  measure(name: string, startMark: string, endMark: string) {
    if (import.meta.env.DEV && 'performance' in window) {
      performance.measure(name, startMark, endMark)
      const measure = performance.getEntriesByName(name)[0]
      console.log(`⏱️ Performance measure: ${name} = ${measure.duration.toFixed(2)}ms`)
    }
  }
}

// 在开发环境暴露到全局
if (import.meta.env.DEV) {
  (window as any).devHelper = devHelper
}
```

### 调试清单和流程

#### Bug修复流程
1. **问题复现**
   - [ ] 确定复现步骤
   - [ ] 记录环境信息（浏览器、设备、网络等）
   - [ ] 收集错误日志和截图

2. **问题分析**
   - [ ] 查看控制台错误信息
   - [ ] 检查网络请求状态
   - [ ] 分析组件状态和数据流
   - [ ] 确定影响范围

3. **解决方案设计**
   - [ ] 分析根本原因
   - [ ] 设计多种解决方案
   - [ ] 评估方案的优缺点
   - [ ] 选择最优方案

4. **修复实施**
   - [ ] 编写修复代码
   - [ ] 添加单元测试
   - [ ] 进行回归测试
   - [ ] 更新文档

5. **验证和发布**
   - [ ] 功能验证
   - [ ] 性能验证
   - [ ] 兼容性验证
   - [ ] 部署到生产环境

#### 常见问题快速诊断
```typescript
// 快速诊断工具
export const quickDiagnostic = {
  // 检查Vue应用状态
  checkVueApp() {
    const issues = []
    
    // 检查Vue版本
    if (!window.Vue) {
      issues.push('Vue未正确加载')
    }
    
    // 检查路由器
    if (!window.$router) {
      issues.push('Vue Router未正确配置')
    }
    
    // 检查状态管理
    if (!window.$pinia) {
      issues.push('Pinia未正确配置')
    }
    
    return issues
  },
  
  // 检查网络连接
  async checkNetwork() {
    const results = {
      online: navigator.onLine,
      speed: null as number | null,
      api: false
    }
    
    // 测试网络速度
    const start = performance.now()
    try {
      await fetch('/api/health', { method: 'HEAD' })
      results.speed = performance.now() - start
      results.api = true
    } catch {
      results.api = false
    }
    
    return results
  },
  
  // 检查浏览器兼容性
  checkBrowserSupport() {
    const features = {
      es6: typeof Promise !== 'undefined',
      fetch: typeof fetch !== 'undefined',
      serviceWorker: 'serviceWorker' in navigator,
      localStorage: typeof Storage !== 'undefined',
      websocket: typeof WebSocket !== 'undefined'
    }
    
    const unsupported = Object.entries(features)
      .filter(([_, supported]) => !supported)
      .map(([feature]) => feature)
    
    return { features, unsupported }
  }
} 