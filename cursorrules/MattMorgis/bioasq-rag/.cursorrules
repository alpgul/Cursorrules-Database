### Project Overview

This is a Python-based RAG demo using the BioASQ dataset for biomedical question answering. The system retrieves relevant PubMed abstracts for a given biomedical question and generates accurate, evidence-based answers.

### Project Structure

The project is organized into modular components, each handling a specific part of the RAG pipeline:

1. **Data Acquisition**: Handles downloading and processing PubMed abstracts referenced in the BioASQ dataset
   - Extracts PubMed URLs from BioASQ questions
   - Downloads abstracts using the NCBI E-utilities API
   - Processes and stores the abstracts for later use in the RAG pipeline

### Module Structure and Imports

Each module follows a consistent structure:

```
module_name/
├── main.py           # Entry point for the module
├── models/           # Data models
├── src/              # Source code
│   ├── routes.py     # API routes
│   └── ...           # Other module-specific code
└── tests/            # Tests for the module
```

Import rules:

1. DO NOT use absolute imports that reference the project name (e.g., `from project_name.module.file`)
2. Use absolute imports from the module's root directory
   - If you are in `indexing_pipeline/src/client/some_client.py` and want to import `indexing_pipeline/src/models/some_model.py`, use `from src.models.some_model import X`
   - Imports should always be absolute paths starting from the module directory, not the project root
3. NO **init**.py FILES should be created to enforce these import patterns

### Package Management

This project uses `uv` for project management.

`uv add`: Add a dependency to the project.
`uv add <dep> --dev`: Add a development dependency
`uv remove`: Remove a dependency from the project.
`uv sync`: Sync the project's dependencies with the environment.
`uv lock`: Create a lockfile for the project's dependencies.
`uv run`: Run a command in the project environment.
Example: `uv run data_acquisition/main.py --email your.email@example.com`
`uv tree`: View the dependency tree for the project.

### Running Tests

# Run tests for a specific module

uv run pytest <module_directory>

### Test Fixtures

All test fixtures should be in the `tests/conftest.py` file.
Please reference `tests/conftest.py` before creating new fixtures.

Only create new fixtures in test files if they are specific to that test file's use cases.
Otherwise, add them to conftest.py for reuse across test files.

### Build and Test Requirements

IMPORTANT:

### DO NOT CREATE **init**.py FILES ANYWHERE IN THIS PROJECT

1. Test-Driven Development (TDD) Workflow:

   - Always check for and update corresponding test files first
   - Follow Red-Green-Refactor pattern:
     - Write/update tests first (Red)
     - Implement code to make tests pass (Green)
     - Refactor while keeping tests green
   - Test files should mirror source file structure in tests/ directory

2. After ALL code changes:

   - Run tests for the specific module you modified:
     ```
     uv run pytest <module_directory>
     ```
   - Fix any test errors (warnings can be ignored)
   - If tests pass, proceed with commit
   - If tests fail, fix issues and rerun tests

3. Documentation:

   - Update relevant documentation if API changes
   - Add docstrings for new functions/classes
   - Update domain model if entity relationships change

4. Code Style:

   - Follow .editorconfig rules
   - Use type hints for all new code
   - Add comments for complex logic
   - Keep functions focused and small

5. After completing ANY task:
   - Run tests for the specific module you worked on:
     ```
     uv run pytest <module_directory>
     ```
   - Add a one-line summary to .cursor-updates in markdown
   - Report test status to user

If you forget, the user can type the command "finish" and you will run the tests for the appropriate module and update `.cursor-updates`.
