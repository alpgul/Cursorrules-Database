# Examples Rules (Live Integration Tests)

## Purpose
Examples **ARE integration tests** - they prove the compiler works by being real, runnable code that developers can use as reference.

## Most Important Example Types

**TESTED EXAMPLES** - examples in `tested/` folders that have expected outputs and are automatically verified.

**FAILSCOMPILATION EXAMPLES** - examples that demonstrate proper compiler error handling and messages.

**FEATURE DEMONSTRATIONS** - comprehensive examples showing real-world usage patterns.

---

## Example Organization Principles

**CONSOLIDATE BY FUNCTIONALITY** - group related examples together instead of having many tiny files.

**BREAK INTO FOLDERS BY FEATURE AREA** - separate fiber, http, websox, etc. into distinct folders.

**MEATY EXAMPLES OVER TRIVIAL ONES** - examples should demonstrate substantial functionality, not just "hello world".

**FEWER, BETTER EXAMPLES** - prefer comprehensive examples over many small ones.

---

## Print Statement Rules

**MINIMIZE PRINT STATEMENTS** - only include prints when necessary for debugging or demonstrating output.

**CONSOLIDATE CONSECUTIVE PRINTS** - combine multiple consecutive print statements into single statements.

**MEANINGFUL OUTPUT ONLY** - prints should serve a purpose (debugging, demonstration, or verification).

---

## DO

**INCLUDE EXPECTED OUTPUTS** - all examples should have corresponding expected output files.

**SHOW REAL-WORLD USAGE PATTERNS** - examples should mirror how developers will actually use the compiler.

**DEMONSTRATE EDGE CASES** - show how to handle boundary conditions and error scenarios.

**GROUP RELATED FUNCTIONALITY** - put related examples together in a subfolder

**MAKE EXAMPLES RUNNABLE** - every example should compile and execute successfully.

**INCLUDE ERROR HANDLING** - show proper error handling patterns in examples.

---

## DON'T

**DON'T CREATE TRIVIAL EXAMPLES** - avoid "hello world" style examples unless they serve a specific purpose.

**DON'T DUPLICATE FUNCTIONALITY** - if an example already demonstrates a feature comprehensively, don't create another one.

**DON'T LEAVE TEMPORARY DEBUGGING PRINTS** - clean up temporary debugging output before committing.

**DON'T CREATE EXAMPLES THAT ARE LIKELY TO FAIL** - examples should be understandable but substantial.

**DON'T IGNORE EXPECTED OUTPUTS** - every example should verify its behavior.

---

## Folder Organization Strategy

**TESTED/** - examples with expected outputs that are automatically verified
**FAILSCOMPILATION/** - examples that should fail compilation with specific error messages  
**[FEATURE]/** - organize by major features (fiber, http, websox, etc.)

**CONSOLIDATE RELATED EXAMPLES** - merge small related examples into comprehensive demonstrations.

**BREAK UP LARGE FILES** - if a feature file gets too large, break it into smaller files.

---

## Example Quality Standards

**COMPREHENSIVE FEATURE COVERAGE** - each example should thoroughly demonstrate its target functionality.

**CLEAN, READABLE CODE** - examples serve as documentation for users.

**PROPER ERROR HANDLING** - show how to handle errors gracefully.

**REALISTIC SCENARIOS** - use examples that mirror real-world use cases.

---

**Remember: Examples are both tests and documentation. Make them comprehensive, clean, and valuable to developers learning the language. They are important for humans and AI agents. Make them readable for both** 