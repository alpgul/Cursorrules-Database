Below is an example **TypeScript/Node.js** folder structure replicating the Python package’s layout. Each subfolder matches the Python counterpart (`agent`, `agents`, `knowledge`, etc.). All “LLM” or “litellm” references are replaced by **`aisdk`** usage.

Feel free to rename or restructure to suit your project’s Node.js conventions.

---

## Folder Structure

```
praisonai-ts/
├── package.json
├── tsconfig.json
├── src/
│   ├── index.ts
│   ├── main.ts
│   ├── agent/
│   │   └── agent.ts
│   ├── agents/
│   │   ├── agents.ts
│   │   └── autoagents.ts
│   ├── knowledge/
│   │   ├── chunking.ts
│   │   └── knowledge.ts
│   ├── llm/
│   │   └── llm.ts
│   ├── memory/
│   │   └── memory.ts
│   ├── process/
│   │   └── process.ts
│   ├── task/
│   │   └── task.ts
│   └── tools/
│       ├── README.md
│       ├── index.ts
│       ├── test.ts
│       ├── arxivTools.ts
│       ├── calculatorTools.ts
│       ├── csvTools.ts
│       ├── duckdbTools.ts
│       ├── duckduckgoTools.ts
│       ├── excelTools.ts
│       ├── fileTools.ts
│       ├── jsonTools.ts
│       ├── newspaperTools.ts
│       ├── pandasTools.ts
│       ├── pythonTools.ts
│       ├── shellTools.ts
│       ├── spiderTools.ts
│       ├── tools.ts
│       ├── wikipediaTools.ts
│       ├── xmlTools.ts
│       ├── yamlTools.ts
│       └── yfinanceTools.ts
└── ...
```

Below is a **high-level table** describing the main files/folders, the classes or functions inside them, their parameters, and return values.

---

| **File / Folder**                 | **Contents**                                                                                                                                                                                                                                                 | **Functions / Classes| **Parameters**                                                                                                                                                                                                                                                                                                                                       | **Return**                                                                     | **Purpose**                                                                                                                                                                                                                                                           |
|-----------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------||------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **src/index.ts**                  | Main entry point that re-exports key classes/functions                                                                                                                                                                                                       | – Typically re-exports `Agent`, `Agents`, `Task`, etc.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | –                                                                                                                                                                                                                                                                                                                                                     | –                                                                              | Provides a simple import path for consumers.                                                                                                                                                                                                                           |
| **src/main.ts**                   | Equivalent of `main.py`, sets up logging, callbacks, registers display callbacks, and integrates with `aisdk` if needed                                                                                                                                       | - `registerDisplayCallback(type: string, callbackFn, isAsync: boolean): void`<br/>- `executeCallback(type: string, ...args): Promise<void>`<br/>- `displayInteraction(...)`, `displayError(...)`, etc. <br/>- Possibly some global logs array or error logs.                                                                                                                                                                                                                                                                           | Depending on the function, e.g. `registerDisplayCallback` → `(type, fn, isAsync)`                                                                                                                                                                                                                                                                     | Varies by function type. Typically `void` or `Promise<void>`                                                   | Central place for logging and “display callbacks,” mirroring the Python approach (prints, error logs, etc.). Uses or references `aisdk` for generating text if needed.                                                                                                 |
| **src/agent/agent.ts**            | Contains `Agent` class, mirroring `agent.py`. Handles single-agent logic, possible references to LLM calls via `aisdk`.                                                                                                                                       | - `class Agent`<br/>   - constructor(name: string, role: string, goal: string, ...)<br/>   - `chat(...)`: main method for handling “chat” or LLM calls<br/>   - `achat(...)`: async method, if needed                                                                                                                                                                                                                                                                                         | **constructor**: `(name, role, goal, tools, ... )` etc. <br/>**chat**: `(prompt: string, ...)` <br/>**achat**: `(prompt: string, ...)`                                                                                                                                                                                                                 | `Promise<string>` or `string` for the chat methods.                                                          | Encapsulates a single agent’s role, name, and the methods for calling the LLM using `aisdk`. Also may manage context, tools, roles, etc.                                                                                                                               |
| **src/agents/agents.ts**          | Contains `PraisonAIAgents` (like `agents.py`). Manages multiple agents, tasks, memory, process type, etc.                                                                                                                                                     | - `class PraisonAIAgents`<br/>   - constructor(agents: Agent[], tasks?: Task[], ...)<br/>   - `addTask(task: Task)`: number<br/>   - `executeTask(taskId: number)`: TaskOutput<br/>   - `runTask(taskId: number)`: void<br/>   - `runAllTasks()`: void<br/>   - `start(...)`: starts them all<br/>   - `getTaskResult(...)`                                                                                                                                         | The constructor takes arrays of `Agent`, optional tasks, manager config, memory config, etc. Other methods take Task IDs.                                                                                                                                                                                                                             | Most methods return `void`, or a `Promise<void>`, or a custom object.                                          | Coordinates multiple agents and tasks in a “manager” style. The top-level orchestrator for tasks and agent interactions.                                                                                                                                               |
| **src/agents/autoagents.ts**      | The `AutoAgents` class, an advanced manager that can auto-create tasks/agents from instructions. Uses `aisdk` to parse config.                                                                                                                               | - `class AutoAgents extends PraisonAIAgents`<br/>   - constructor(instructions: string, tools?: any[], ...)<br/>   - `_generateConfig(...)`<br/>   - `_createAgentsAndTasks(...)`<br/>   - `start()`: overrides the parent to handle auto generation<br/>   - etc.                                                                                                                                                                                                                              | Takes user instructions, tools, config (like memory usage, manager LLM, etc.).                                                                                                                                                                                                                                                                       | Typically `Promise<object>` or `void` for the `start()` method.                                               | High-level convenience for automatically generating agent/task configuration from user instructions.                                                                                                                              |
| **src/knowledge/chunking.ts**     | `Chunking` class for text chunking. Similar logic to the Python version.                                                                                                                                                                                     | - `class Chunking`<br/>   - constructor(chunkerType: string, ... )<br/>   - `chunk(text: string | string[], addContext: boolean, contextParams: any): Chunk[]`<br/>   - Possibly `_get_overlap_refinery(...)`, etc.                                                                                                                                                                                                                                                                     | Similar to Python (chunkerType, chunkSize, etc.).                                                                                                                                                                                                                                                                                                     | Returns an array of chunked text or objects describing the chunk.                                             | Manages chunking text for memory or knowledge base usage (like large documents).                                                                                                                                               |
| **src/knowledge/knowledge.ts**    | `Knowledge` class for storing & retrieving data from memory, chunking, vector DB, etc.                                                                                                                                                                       | - `class Knowledge`<br/>   - constructor(config: any, verbose?: number)<br/>   - `store(content: string, userId?: string, ...): any`<br/>   - `search(query: string, ...): any`<br/>   - `deleteAll(...)`: etc.                                                                                                                                                                                                                                                                                 | Takes a config object for local or external DB. Methods get or store docs, do RAG searching, etc.                                                                                                                                                                                                                                                    | Return types typically objects or arrays.                                                                     | Central interface to handle knowledge storage, chunking, retrieval, e.g. vector store, RAG.                                                                                                                                      |
| **src/llm/llm.ts**                | `LLM` class referencing **`aisdk`** instead of `litellm`. Basic usage of `generateText` or `streamText`.                                                                                                                                                       | - `class LLM`<br/>   - constructor(options: { model: string, apiKey?: string, ... })<br/>   - `response(prompt: string, ...): Promise<string>` (calls `aisdk.generateText`)<br/>   - possibly `streamResponse(...)` if needed                                                                                                                              | `model, prompt, temperature, ...`                                                                                                                                                                                                                                                                                                                  | `Promise<string>` for final text.                                                                             | The bridging layer between your code and `aisdk`, so `Agent` can call `LLM.response(...)`.                                                                                                                                      |
| **src/memory/memory.ts**          | `Memory` class for short-term or long-term memory references, entity memory, user memory, etc.                                                                                                                                                              | - `class Memory`<br/>   - constructor(config: MemoryConfig, verbose?: number)<br/>   - `storeShortTerm(...)`, `storeLongTerm(...)`, `searchShortTerm(...)`, etc.<br/>   - `buildContextForTask(...)`                                                                                                                                                                                                                                                    | Varies, e.g. `(text: string, metadata?: any)`                                                                                                                                                                                                                                                                                                       | Typically `void` or some object referencing stored docs.                                                      | Takes a config describing how/where memory is stored: local DB, RAG, or `aisdk` embeddings.                                                                                                                                     |
| **src/process/process.ts**        | `Process` class that handles sequential or workflow processes between tasks.                                                                                                                                                                                | - `class Process`<br/>   - constructor(tasks: Map<number, Task>, agents: Agent[], ... )<br/>   - `sequential()`, `workflow()`, `hierarchical()`, etc.                                                                                                                                                                                                                                                                                                     | Receives tasks, agents, process type.                                                                                                                                                                                                                                                                                                               | Returns an iterator or array describing the next tasks to run.                                               | Logic for ordering tasks in “sequential”, “hierarchical”, or “workflow” modes.                                                                                                                                                   |
| **src/task/task.ts**              | `Task` class for describing a single piece of work, the agent assigned, context, etc.                                                                                                                                                                       | - `class Task`<br/>   - constructor(description: string, expectedOutput?: string, ... )<br/>   - `executeCallback(taskOutput: TaskOutput)`, `storeInMemory(...)`, etc.                                                                                                                                                                                                                                                                                  | The constructor has many options: `(description, expectedOutput, agent, tools, ...)`.                                                                                                                                                                                                                                                                 | Methods return `void`, or custom objects.                                                                     | Encapsulates a single unit of work, references an agent, has optional callback, memory usage, etc.                                                                                                                               |
| **src/tools/README.md**           | Short README describing how to write “tools” in JS/TS.                                                                                                                                                                                                      | –                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             | –                                                                                                                                                                                                                                                                                                                                                     | –                                                                              | Provides docs for tool developers.                                                                                                                                                                                                                                      |
| **src/tools/index.ts**            | Entry point that re-exports tool functions (like `internetSearch`, `getArxivPaper`, etc.)                                                                                                                        | - Possibly a map of `functionName -> import`<br/> - `import * as calculatorTools from './calculatorTools'`, etc.                                                                                                                                                                                                                                                                                                                                    | –                                                                                                                                                                                                                                                                                                                                                     | –                                                                              | Simplifies import of tools (e.g. `import { getArticle } from "praisonai/tools"`).                                                                                                                                               |
| **src/tools/test.ts**             | Script for running each tool’s internal test or example.                                                                                                                                                                                                   | - Typically a script that `import ... from './someTool.ts'` then tries them.                                                                                                                                                                                                                                                                                                                                                                                                                 | –                                                                                                                                                                                                                                                                                                                                                     | –                                                                              | Quick local tests.                                                                                                                                                                                                                                                      |
| **src/tools/arxivTools.ts**       | Example “arxiv_tools.py” logic in TS. Searching arXiv, returning results.                                                                                                                                                                                   | - `function searchArxiv(query: string, ...): Promise<any[]>`<br/> - `function getArxivPaper(id: string): Promise<any>` etc.                                                                                                                                                                                                                                                                                                                                                                   | `(query, maxResults=10, ... )`                                                                                                                                                                                                                                                                                                                     | `Promise<ArxivPaper[]>` or something like that.                                                               | Tools for searching and retrieving from arXiv.                                                                                                                                                                                                                          |
| **src/tools/calculatorTools.ts**   | Evaluate expressions, solve equations. Mirroring `calculator_tools.py`.                                                                                                                                                                                    | - `function evaluate(expression: string, ...): number \| { error: string }`<br/> - `function solveEquation(equation: string, variable: string): number[] \| { error: string }`<br/> - ...                                                                                                                                                                                                                                                                 | Expression or equation. Possibly numeric or string for “units” etc.                                                                                                                                                                                                                                                                                  | Return numeric results or error object.                                                                       | Basic math operations in TS.                                                                                                                                                                                                                                            |
| **src/tools/csvTools.ts**         | CSV read/write using Node or `papaparse` or built-in modules.                                                                                                                                                                                               | - `function readCSV(filepath: string, ...): Promise<object[]>`<br/> - `function writeCSV(filepath: string, data: object[]): Promise<void>`<br/> - `function mergeCSV(...): Promise<void>`                                                                                                                                                                                                                                                                                                     | File paths, etc.                                                                                                                                                                                                                                                                                                                                      | Arrays of objects or success/failure.                                                                        | CSV operations in TS.                                                                                                                                                                                                                                                   |
| **src/tools/duckdbTools.ts**      | DuckDB integration.                                                                                                                                                                                                                                        | - `function executeQuery(sql: string, ...): Promise<any[]>`<br/> - `function loadCSV(...)`, `function exportCSV(...)` etc.                                                                                                                                                                                                                                                                                                                                                                    | `(command, params?)`, `(filepath)`, etc.                                                                                                                                                                                                                                                                                                           | Return arrays or booleans.                                                                                    | Node.js version of the Python duckdb tools.                                                                                                                                                                                                                              |
| **src/tools/duckduckgoTools.ts**  | Searching the internet using DuckDuckGo.                                                                                                                                                                                                                   | - `function internetSearch(query: string): Promise<{ title: string; url: string; snippet: string; }[]>`                                                                                                                                                                                                                                                                                                                                                                                        | `query: string`                                                                                                                                                                                                                                                                                                                                       | `Promise<Array<...>>` of results.                                                                            | Replacement for `internet_search`.                                                                                                                                                                                                                                       |
| **src/tools/excelTools.ts**       | Reading/writing Excel files with e.g. `xlsx` or `exceljs`.                                                                                                                                                                                                 | - `function readExcel(filepath: string, ...): Promise<object[]>`<br/> - `function writeExcel(filepath: string, data: object[], ...): Promise<void>`<br/> - etc.                                                                                                                                                                                                                                                                                                                              | `(filepath, sheetName?, ... )`                                                                                                                                                                                                                                                                                                                      | Arrays or boolean success.                                                                                    | Node version of `excel_tools.py`.                                                                                                                                                                                                                                        |
| **src/tools/fileTools.ts**        | File reading, writing, listing, copying.                                                                                                                                                                                                                   | - `function readFile(path: string): Promise<string>`<br/> - `function writeFile(path: string, data: string): Promise<boolean>`<br/> - etc.                                                                                                                                                                                                                                                                                                                                                      | Strings for path, etc.                                                                                                                                                                                                                                                                                                                                | Return file contents or success flags.                                                                       | Basic file ops in TS.                                                                                                                                                                                                                                                    |
| **src/tools/jsonTools.ts**        | JSON reading, merging, validation.                                                                                                                                                                                                                          | - `function readJSON(...)`, `function writeJSON(...)`, `mergeJSON(...)`, etc.                                                                                                                                                                                                                                                                                                                                                                                                               | `(filepath)`, or `(data, file, ...)`.                                                                                                                                                                                                                                                                                                               | Usually object or boolean.                                                                                   | TS version of `json_tools.py`.                                                                                                                                                                                                                                           |
| **src/tools/newspaperTools.ts**    | For scraping articles from news sources. Could use `node-fetch` + `cheerio` for HTML extraction.                                                                                                                                                           | - `function getArticle(url: string): Promise<{ ... }>`<br/> - `function getNewsSources(category: string): ...` etc.                                                                                                                                                                                                                                                                                                                                                                             | Various URL or category.                                                                                                                                                                                                                                                                                                                               | Return objects or arrays.                                                                                    | Equivalent to `newspaper_tools.py`. Possibly requires more robust scraping libraries.                                                                                                                                             |
| **src/tools/pandasTools.ts**      | Simulated “pandas” usage, or just referencing Node CSV/Excel data frames.                                                                                                                                                                                   | - `function filterData(data: any[], condition: string): any[]`<br/> - `function getSummary(data: any[]): object`                                                                                                                                                                                                                                                                                                                                                                               | The data array, the condition string.                                                                                                                                                                                                                                                                                                                 | Return new arrays or stats objects.                                                                          | Node-based data manip. This is quite optional unless you want a TS version of “pandas.”                                                                                                                                           |
| **src/tools/pythonTools.ts**      | “Execute Python code” or lint code. Typically replaced by Node child_process or direct function calls.                                                                                                                                                      | - `function executeCode(code: string): Promise<{stdout: string, stderr: string, ...}>`<br/> - `function analyzeCode(...)`, etc.                                                                                                                                                                                                                                                                                                                                                                 | The code as string.                                                                                                                                                                                                                                                                                                                                    | Return logs, or results from child process.                                                                   | A Node approach to replicate “python_tools.py” if you want.                                                                                                                                                                                                            |
| **src/tools/shellTools.ts**       | Execute shell commands safely. Typically uses `child_process.spawn` or `execFile` in Node.                                                                                                                                                                  | - `function executeCommand(command: string, ...): Promise<{stdout: string, stderr: string, exitCode: number}>`<br/> - `function listProcesses(): ...` (requires cross-platform approach)                                                                                                                                                                                                                                                                                                         | Command string, possibly timeout, shell boolean, etc.                                                                                                                                                                                                                                                                                                 | An object with stdout/stderr/exit code.                                                                      | TS version of the shell tools.                                                                                                                                                                                                                                           |
| **src/tools/spiderTools.ts**      | Web scraping/crawling. Possibly uses `node-fetch` or `axios` with `cheerio`.                                                                                                                                                                                | - `function scrapePage(url: string, ...): Promise<{ content: string, ...}>`<br/> - `function extractLinks(url: string, ...): Promise<Link[]>`<br/> - `function crawl(...)`: etc.                                                                                                                                                                                                                                                                                                              | `url, sameDomain?, excludePatterns?`, etc.                                                                                                                                                                                                                                                                                                            | Return object with text, links, or array of links.                                                           | Node version of spider/crawl tools.                                                                                                                                                                                                                                      |
| **src/tools/tools.ts**            | “Tools” aggregator, possibly referencing `internetSearch`, etc.                                                                                                                                                                                              | - `export { internetSearch } from './duckduckgoTools'` etc.                                                                                                                                                                                                                                                                                                                                                                                                                                    | –                                                                                                                                                                                                                                                                                                                                                     | –                                                                              | Quick aggregator for common tool exports.                                                                                                                                                                                                                                |
| **src/tools/wikipediaTools.ts**   | Searching Wikipedia, summarizing pages. For Node, use `wikijs` or direct fetch.                                                                                                                                                                             | - `function wikiSearch(query: string, ...): Promise<string[]>`<br/> - `function wikiSummary(title: string): Promise<string \| { error: string }>`, etc.                                                                                                                                                                                                                                                                                                                                          | `query`, `title`, etc.                                                                                                                                                                                                                                                                                                                                | Typically arrays of results or summary text.                                                                 | Node version of `wikipedia_tools.py`.                                                                                                                                                                                                                                    |
| **src/tools/xmlTools.ts**         | Reading, writing, transforming XML. Possibly uses `xml2js` or `fast-xml-parser`.                                                                                                                                                                            | - `function readXML(filepath: string, ...): Promise<any>`<br/> - `function writeXML(root: any, filepath: string): Promise<void>`<br/> - `function transformXML(xmlFile, xsltFile, ...): ...`                                                                                                                                                                                                                                                                                                    | Strings, or objects for XML.                                                                                                                                                                                                                                                                                                                          | Return objects or booleans.                                                                                  | TS version of the `xml_tools.py`.                                                                                                                                                                                                                                        |
| **src/tools/yamlTools.ts**        | Reading, writing, merging YAML. Typically uses `js-yaml`.                                                                                                                                                                                                   | - `function readYAML(filepath: string): any`<br/> - `function writeYAML(filepath: string, data: any): void`<br/> - `function mergeYAML(files: string[]): any`                                                                                                                                                                                                                                                                                                                                   | `(filepath)`, or `(files)`, etc.                                                                                                                                                                                                                                                                                                                      | Return object or boolean.                                                                                    | Node version of the `yaml_tools.py`.                                                                                                                                                                                                                                     |
| **src/tools/yfinanceTools.ts**    | Similar to python’s `yfinance`, possibly using an HTTP wrapper or a third-party TS library.                                                                                                                                                                  | - `class YFinanceTools`<br/> - `getStockPrice(symbol: string): Promise<{price: number, ...}>`<br/> - `getStockInfo(symbol: string): Promise<object>`<br/> - `getHistoricalData(symbol: string, ...): Promise<any[]>`                                                                                                                                                                                                                                                                           | `symbol: string`, plus `period`, `interval`, etc.                                                                                                                                                                                                                                                                                                     | Returns object or array with stock data.                                                                      | Node approach for stock data retrieval.                                                                                                                                                                                                                                   |
| **src/tools/train/data/generatecot.ts** (optional) | If you want to replicate the chain-of-thought generator. Might reference `aisdk` for text generation.                                                                                                                                            | - `class GenerateCOT` <br/>   - `cotGenerate(...)` <br/>   - `cotCheck(...)` <br/>   - `cotRun(...)` etc.                                                                                                                                                                                                                                                                                                                                                                                          | Typically `(question: string, context?: string)`                                                                                                                                                                                                                                                                                                      | Usually returns strings or JSON objects with chain-of-thought.                                               | Node version of the advanced “GenerateCOT” references.                                                                                                                                                                                                                  |

---

### Notes on `aisdk` Integration

1. In the Python code, many calls like `litellm` or `OpenAI(api_key=...)` appear. In **Node**, replace that with something like:
   ```ts
   import { generateText } from "aisdk";

   async function callLLM(prompt: string) {
     const { text } = await generateText({
       model: "gpt-4-turbo",
       prompt,
       // other config like temperature, maxTokens, etc.
     });
     return text;
   }
   ```
2. The `LLM` class in `llm.ts` can wrap `generateText` calls:
   ```ts
   import { generateText } from "aisdk";

   export class LLM {
     model: string;

     constructor(model: string) {
       this.model = model;
     }

     async response(prompt: string, temperature=0.7): Promise<string> {
       const { text } = await generateText({
         model: this.model,
         prompt,
         temperature
       });
       return text;
     }
   }
   ```

3. Agents or tasks can reference the `LLM` instance or call `aisdk` directly.

---

### Summary

- **Each folder** in `praisonaiagents/` is mapped to a corresponding **subfolder in TypeScript**.
- **Classes** or **functions** mirror the Python classes, with the same constructor parameters and method signatures in a TypeScript style.
- **Return types** are changed from Python style (`dict`, `list`) to TypeScript style (`object`, `Record<string,any>`, `Promise<void>`, etc.).
- **Use `aisdk`** in place of `litellm` / `openai`.
- **Tool files** replicate exactly what the Python code does, but in TypeScript (e.g., `arxivTools.ts`, `calculatorTools.ts`, etc.).
- **Add any third-party TS libs** needed (`node-fetch`, `cheerio`, `duckdb`, `yaml`, `xml2js`, etc.).

This gives a **1-to-1** replication of the Python package’s structure, now in a Node/TypeScript environment with **aisdk** for large language model calls.