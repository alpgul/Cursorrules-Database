# ByteBot Cursor 规则配置

## 项目概述
ByteBot 是一个基于 AI 的桌面智能体项目，采用微服务架构和模块化设计。项目使用 TypeScript、React、Next.js 和 Docker 技术栈。

## 核心开发原则

### 1. 一致性优先
- 遵循统一的命名规范（kebab-case）
- 使用一致的代码格式化（4空格缩进）
- 保持统一的错误处理模式

### 2. 类型安全
- 所有公共接口都要有 TypeScript 类型定义
- 使用严格的类型检查
- 避免使用 `any` 类型

### 3. 模块化设计
- 核心功能集中在 `src/core/` 目录
- 配置文件统一管理在 `config/` 目录
- 每个模块都有清晰的职责边界

### 4. 安全第一
- 所有用户输入都要验证和清理
- 敏感信息使用环境变量管理
- 实施适当的身份验证和授权

## 技术栈规范

### TypeScript 标准
- 使用 4 个空格缩进
- 所有语句以分号结尾
- 优先使用单引号
- 公共方法必须有 JSDoc 注释
- 使用 async/await 而非 Promise.then()

### React/Next.js 规范
- 优先使用函数组件
- 使用 TypeScript 进行类型定义
- 遵循 React Hooks 最佳实践
- 使用 CSS Modules 或 Tailwind CSS
- 实施适当的错误边界

### API 设计标准
- 遵循 RESTful 设计原则
- 使用标准 HTTP 状态码
- 统一的响应格式
- 实施参数验证和错误处理

## 文件组织

### 核心模块
- `src/core/` - 核心功能模块
- `packages/` - 微服务包
- `config/` - 配置文件
- `docs/` - 项目文档

### 配置文件
- 使用 YAML 格式（2空格缩进）
- 包含版本信息和注释
- 提供 JSON Schema 验证

## 开发工作流

### 环境要求
- Node.js 20.19.4 (LTS)
- 使用 `nvm use` 确保版本一致
- Docker 用于容器化部署

### 代码质量
- 使用 ESLint 和 Prettier
- 编写单元测试（覆盖率 80%+）
- 实施代码审查流程

### 安全考虑
- 环境变量验证
- 输入验证和清理
- JWT 令牌管理
- CORS 和 CSP 配置

## 特殊指令

### 代码生成
- 生成代码时遵循项目规范
- 添加适当的错误处理
- 包含 JSDoc 注释
- 考虑性能优化

### 问题解决
- 优先查看现有模块是否有相关功能
- 参考配置文件中的示例
- 遵循项目的错误处理模式

### 文档更新
- 新功能必须更新相关文档
- 保持 README 文件最新
- 更新 API 文档

## 项目特定规则

### MCP 集成
- 新 MCP 工具需要更新服务器注册表
- 遵循 MCP 协议规范
- 实施适当的错误处理

### 对话管理
- 使用统一的对话历史格式
- 实施适当的存储策略
- 考虑隐私和安全

### 提示词管理
- 使用 YAML 配置文件
- 支持动态模板渲染
- 版本化管理

---

> 💡 这些规则旨在提高开发效率和代码质量。如有疑问，请参考 `.cursor/rules/` 目录下的详细规则文件。
