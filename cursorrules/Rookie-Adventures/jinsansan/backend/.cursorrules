后端项目规范

前端已经完善测试完毕，错误处理。类型定义，API，文档系统等等，开发后端时应当与前端对齐或者共享！！！
例如：
{
测试
前端：已完善组件测试，确保UI和业务逻辑的正确性。
后端：在开发时应编写相应的单元测试和集成测试，确保API和业务逻辑的可靠性。与前端的测试覆盖率标准保持一致（如80%以上）。
错误处理
前端：已经建立了完善的错误处理机制，包括错误边界、HTTP错误处理等。
后端：应实现与前端一致的错误类型和处理机制，确保前后端在错误响应格式和错误码上的一致性。
类型定义
前端：使用TypeScript进行了详细的类型定义，涵盖组件、API响应等。
后端：应共享前端的类型定义，建议通过Monorepo或私有npm包的方式共享DTO（数据传输对象）和API响应类型，确保前后端的数据结构一致。
API契约
前端和后端：共同维护API文档系统（如Swagger/OpenAPI），确保接口定义明确、文档及时更新。前后端应基于同一份API定义进行开发，减少接口不一致的问题。
文档系统
前端：已经有详细的文档记录项目结构、组件使用、API接口等。
后端：应建立与前端相似的文档系统，详细记录后端的项目结构、服务接口、数据模型等，确保团队成员能够快速上手和理解后端代码。
进一步优化建议
虽然上述对齐已经涵盖了关键点，但为了确保前后端协作的更高效和无缝，以下几点建议可以进一步优化：
共享代码库
Monorepo：使用Monorepo管理前后端项目，方便共享类型定义、工具函数等。
版本控制：确保前后端代码库的分支策略和提交规范一致，便于版本管理和代码审查。
自动化工具
同步类型定义：使用代码生成工具（如Swagger Codegen）自动生成前后端的类型定义，减少手动同步的错误。
CI/CD 集成：确保前后端的CI/CD流程相互兼容，如共同的代码格式化、Linting规则，统一的测试报告格式等。
错误日志和监控
集中式日志系统：前后端共享错误日志系统（如Sentry），便于全栈追踪和监控错误。
性能监控：统一的性能监控工具，监控前后端的性能指标，及时发现和解决性能瓶颈。
等等··
}

1.应用层架构

┌─────────────┐
│   Routes    │ 路由层：定义 URL 映射，解析请求并转发至控制器
├─────────────┤
│ Controllers │ 控制层：处理请求逻辑，封装响应
├─────────────┤
│  Services   │ 服务层：处理复杂业务逻辑，包含事务控制
├─────────────┤
│   Models    │ 数据层：定义数据库模型及数据访问逻辑
└─────────────┘


2.#领域模型：
┌─────────────┐
│    Types    │ 类型层：定义接口、枚举、类型
├─────────────┤
│    DTOs     │ 传输层：定义数据传输对象
├─────────────┤
│  Entities   │ 实体层：定义领域实体，反映业务逻辑
└─────────────┘

3.#基础设施：
┌─────────────┐
│    Utils    │ 工具层：通用工具函数，辅助逻辑
├─────────────┤
│ Middleware  │ 中间件：请求/响应拦截处理
├─────────────┤
│   Config    │ 配置层：环境变量、全局配置
└─────────────┘

4.#模块划分
核心模块：

auth：认证与授权
user：用户管理
chat：聊天功能
model：模型管理
order：订单管理
admin：管理员后台
payment：支付功能

#基础设施
common：通用功能
config：配置管理
utils：工具函数
types：类型定义


#项目结构
backend/
├── src/
│   ├── config/               # 配置模块
│   │   ├── index.ts         # 配置统一导出
│   │   ├── app.config.ts    # 应用配置
│   │   └── db.config.ts     # 数据库配置
│   ├── controllers/         # 控制器
│   │   ├── auth.controller.ts       # 认证控制器
│   │   ├── admin.controller.ts      # 管理员控制器
│   │   ├── payment.controller.ts    # 支付控制器
│   │   └── __tests__/               # 控制器测试
│   │       └── auth.controller.test.ts
│   ├── services/            # 服务层
│   │   ├── auth.service.ts          # 认证服务
│   │   ├── admin.service.ts         # 管理员服务
│   │   ├── payment.service.ts       # 支付服务
│   │   └── __tests__/               # 服务测试
│   │       └── auth.service.test.ts
│   ├── models/              # 数据模型
│   │   ├── user.model.ts           # 用户数据模型
│   │   ├── admin.model.ts          # 管理员数据模型
│   │   ├── payment.model.ts        # 支付数据模型
│   │   └── __tests__/              # 模型测试
│   │       └── user.model.test.ts
│   ├── routes/              # 路由
│   │   ├── auth.routes.ts         # 认证路由
│   │   ├── admin.routes.ts        # 管理员路由
│   │   ├── payment.routes.ts      # 支付路由
│   │   └── __tests__/             # 路由测试
│   │       └── auth.routes.test.ts
│   ├── middleware/          # 中间件
│   │   ├── auth.middleware.ts        # 认证中间件
│   │   ├── admin.middleware.ts       # 管理员权限中间件
│   │   ├── payment.middleware.ts     # 支付中间件
│   │   └── __tests__/                # 中间件测试
│   │       └── auth.middleware.test.ts
│   ├── utils/               # 工具
│   │   ├── response.ts           # 响应封装工具
│   │   └── __tests__/            # 工具测试
│   │       └── response.test.ts
│   ├── types/               # 类型定义
│   │   ├── index.ts         # 类型统一导出
│   │   └── api.response.types.ts  # API 响应类型
│   └── app.ts               # 应用入口文件
├── test/                    # 测试相关配置
│   ├── setup.ts            # 测试环境配置
│   ├── testUtils.ts        # 通用测试工具
└── vitest.config.ts        # Vitest 配置文件（移到根目录）


#管理员后台功能

6. API 设计
管理员模块 API

// 用户管理
GET    /admin/users              # 获取用户列表（分页、搜索、排序）
GET    /admin/users/:id          # 获取用户详情
POST   /admin/users              # 创建用户
PUT    /admin/users/:id          # 更新用户信息
DELETE /admin/users/:id          # 删除用户
PATCH  /admin/users/:id/status   # 更新用户状态

// 角色与权限
GET    /admin/roles              # 获取角色列表
GET    /admin/permissions        # 获取权限列表
POST   /admin/roles/:id/permissions # 分配角色权限

// 统计与日志
GET    /admin/dashboard          # 获取仪表盘统计数据
GET    /admin/logs               # 获取操作日志

支付模块 API

POST   /payment/create           # 创建支付订单
GET    /payment/status/:orderId  # 查询支付状态
POST   /payment/callback         # 支付网关回调
统一请求/响应格式

interface ApiResponse<T> {
  code: number;
  message: string;
  data: T;
  timestamp: number;
}

interface PageQuery {
  page: number;
  pageSize: number;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
  keyword?: string;
}

interface PageResult<T> {
  list: T[];
  total: number;
  page: number;
  pageSize: number;
}
错误码规范
···
enum ErrorCode {
  SUCCESS = 200,
  UNAUTHORIZED = 401,
  FORBIDDEN = 403,
  NOT_FOUND = 404,
  VALIDATION_ERROR = 422,
  INTERNAL_ERROR = 500,
}
···
7. 权限控制
所有管理员接口需通过中间件校验权限，确保只有管理员角色能访问。

import { adminMiddleware } from '../middleware/admin.middleware';
router.use(adminMiddleware);

8. 测试
为每个模块编写单元测试与集成测试。

控制器测试：admin.controller.test.ts、payment.controller.test.ts
服务层测试：admin.service.test.ts、payment.service.test.ts
中间件测试：admin.middleware.test.ts
数据模型测试：user.model.test.ts、payment.model.test.ts

9. API 文档
通过 Swagger/OpenAPI 生成文档，包含以下内容：

请求方法与路径
请求参数、类型及示例
返回值类型及示例
错误码说明
示例文档（Swagger）：

paths:
  /admin/users:
    get:
      summary: 获取用户列表
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResult'


# 技术栈
Node.js：版本 22.12.0
Express：版本 4.21.2
MongoDB：版本 7.0.4
Redis：版本 7.2.3
Swagger/OpenAPI：API文档生成


# 安全机制
使用 JWT 进行身份验证，确保管理员权限验证。
在管理员请求中，确保进行 角色权限控制，只允许 admin 用户访问管理员接口。

#数据库设计
在数据库模型中，管理员可以有 role 字段来区分权限。需要合理设计数据模型，避免冗余。

## **测试规范**

### **框架**
- 使用 Vitest 进行单元测试和集成测试
- 使用 Supertest 进行 API 测试
- 使用 Supertest 进行 E2E 测试（推荐）
### **覆盖率要求**
- **语句**：80%
- **分支**：80%
- **函数**：90%
- **行**：80%

### **测试配置**
- 测试初始化文件：`test/setup.ts`
- Vitest 配置文件：`vitest.config.ts`

### **测试环境**
```