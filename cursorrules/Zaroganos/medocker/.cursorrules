# Medocker Project - Rules for Cursor AI

## Project Context
Medocker is a comprehensive Docker packaging system for medical practice software. It includes:
- OpenEMR for electronic medical records
- Nextcloud for file storage and collaboration
- Vaultwarden for password management
- Multiple optional services (RustDesk, Fasten Health, etc.)
- Core infrastructure components (Traefik, Keycloak)

The goal of Medocker is to enable a clinic to spin up super quickly by launching the central services with Medocker-server, and bringing every Laptop, Desktop, and Mobile device in the network up with initial setup configurations managed conventiently at a single point: the Medocker web GUI, with Medocker-user. Medocker wishes to revolutionize the software side of clinic management and democratize independently operated practices by offering a pre-configured full stack of IT and Medical software that is enough to comfortably operate a practice, out-of-the-box. The user simply downloads the executable for Medocker-server if they are setting up the server stack, or Medocker-user, if they are setting up a user-facing device. The executable launches into a web GUI, through which the user configures the stack they wish to deploy, and export the relevant file. With the server version, it will deploy via SSH the docker-compose.yml and any ancillary items and launch the server stack. The user version will launch the Ansible playbook to set up the apps and settings on the Desktop or Laptop device, with a commensurate method for Mobile devices.

## Code Structure
- `src/`: Main Python source code
  - `configure.py`: Configuration tool and Docker compose generation
  - `medocker.py`: Main CLI entry point
  - `web.py`: Web interface backend
  - `run_web.py`: Web interface entry point
- `templates/`: HTML templates for the web interface
- `config/`: YAML configuration files
- `docs/`: Documentation

## Coding Standards
- Use Python 3.10+ compatible code
- Follow PEP 8 style guidelines
- Use type hints where beneficial
- Document functions with docstrings
- Keep functions focused on a single responsibility
- Use meaningful variable and function names
- Prefer explicit imports over wildcard imports

## Docker Guidelines
- Use official base images when possible
- Minimize image layers and size
- Follow multi-stage build patterns when applicable
- Ensure proper volume mounting for persistent data
- Expose only necessary ports
- Set appropriate environment variables

## Web Interface Guidelines
- Follow Bootstrap 5 patterns for UI components
- Keep JavaScript modular and well-commented
- Ensure responsive design for all components
- Validate user input on both client and server sides
- Use Flask best practices for routing and templating

## Security Guidelines
- Never hardcode credentials
- Generate secure default passwords, as passphrases
- Use proper input sanitization
- Implement appropriate authentication for all services
- Ensure secure defaults for all services

## Documentation Guidelines
- Document each service with:
  - Purpose and use cases
  - Configuration options
  - Security considerations
  - Integration points with other services

## When suggesting code changes:
- Consider the existing architectural patterns
- Maintain backward compatibility where possible
- Prioritize security and reliability
- Suggest appropriate error handling strategies
- Consider both development and production environments
- Include necessary updates to documentation 