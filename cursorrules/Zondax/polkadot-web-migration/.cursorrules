# Project Rules and Guidelines

## Lessons

- When refactoring code with observable state, separate business logic from state management by creating dedicated service classes that are agnostic of state management libraries
- Use clean architecture principles to improve code scalability, reusability, and maintainability
- Keep state management in a thin layer that delegates to core business logic services
- Export service instances as singletons to ensure consistent state across the application
- Place interfaces and core business logic in separate files to maintain a clean separation of concerns 
- When building complex UI pages, break them down into smaller modular components in dedicated files for better maintainability and reusability
- Use component composition patterns to assemble complex pages from smaller, focused component modules
- Keep state management centralized in parent components and pass data and handlers down as props to child components 
- Extract reusable UI elements like backgrounds, gradients and animations into configurable components that can be used across different pages with consistent styling 
- Create custom hooks to encapsulate complex logic and state management for UI features like tabs, making them reusable across different components
- When working with index-based UI components like tabs, ensure data structures and typing are consistent between UI components and data models
- Use type-safety to catch potential issues early by properly defining interfaces and types for components, hooks, and their interactions
- Centralize tab configuration in a single file (like config/ui.ts) to make it easier to maintain and update in the future
- When creating hooks that handle observable state, extract filtering logic into pure functions outside the hook for better testability and reuse
- Use type guards to ensure type safety when working with potentially undefined values from external data sources
- Separate business logic from UI components by creating dedicated hooks that encapsulate state management and data transformation
- Export pure utility functions from hooks for reuse in other parts of the codebase, enhancing code sharing and reducing duplication 
- When styling UI components, use consistent colors, spacing, and typography across the application to maintain visual coherence
- Implement component variants using class-variance-authority to provide flexible yet consistent styling options
- Use utility-first CSS with Tailwind for component styling, but extract common patterns into reusable component libraries
- Define specific color values in components rather than using generic theme variables when creating specialized UI elements
- Add smooth transitions and animations to interactive elements like progress bars for a more polished user experience 
- Organize utility functions into domain-specific modules (e.g., format.ts, error.ts, etc.) while maintaining backward compatibility through a main index.ts that re-exports everything
- Use appropriate file extensions (.ts for pure TypeScript utilities, .tsx for utilities that contain JSX) to ensure proper compiler handling and type checking
- Mock external dependencies in tests, especially those with browser-specific functionality, using vi.mock() to create controlled test environments 