# Wetlands ML GeoAI - Cursor Rules

## Project Overview
This is a geospatial machine learning project for wetland detection and segmentation using Sentinel-2 satellite imagery and NAIP aerial imagery. The project includes:
- Sentinel-2 seasonal composite generation (SPR/SUM/FAL)
- Multi-source raster stacking (NAIP + Sentinel-2 → 25-band imagery)
- Two ML model options: Mask R-CNN (instance segmentation) and UNet (semantic segmentation)
- Streaming inference using stack manifests for memory efficiency

## Code Architecture

### Module Organization
- `src/wetlands_ml_geoai/` - Core reusable Python modules (the actual implementation)
- Root-level scripts (`train.py`, `test.py`, etc.) - Thin CLI shims that delegate to modules in `src/`
- `tools/` - Utility scripts (e.g., NAIP downloads)
- `scripts/windows/` - Windows batch launchers for common workflows
- `docs/` - Project documentation and guidelines
- `data/` - Local datasets (git-ignored, never commit)

### Key Modules
- `sentinel2_processing.py` - Seasonal composite generation using STAC API
- `stacking.py` - RasterStack class for streaming multi-source rasters via manifests
- `train.py` - Mask R-CNN training pipeline (instance segmentation)
- `train_unet.py` - UNet training pipeline (semantic segmentation)
- `test.py` / `test_unet.py` - Inference and vectorization

## Python Style Guidelines

### General Conventions
- **Python version**: Target Python 3.8+
- **Style**: Follow PEP 8 strictly
- **Indentation**: 4 spaces (never tabs)
- **Naming**:
  - `snake_case` for variables, functions, modules, and file names
  - `PascalCase` for classes
  - `UPPER_SNAKE_CASE` for constants
  - **Helper functions** (internal utilities) MUST begin with underscore `_` prefix
- **Line length**: Prefer 120 characters max, but prioritize readability
- **Imports**: Group in standard order (stdlib, third-party, local), alphabetize within groups
- **Docstrings**: Use triple-quoted strings for modules, classes, and public functions


### Code Organization
- Place constants (paths, hyperparameters) near the top of scripts
- Gate environment-specific overrides inside `if __name__ == "__main__":` blocks
- Prefer `pathlib.Path` over raw strings for filesystem operations
- Use type hints for function signatures where clarity benefits

### Comments
- Write concise inline comments when logic is non-obvious
- Avoid obvious comments ("increment counter" for `i += 1`)
- Document why, not what (the code shows what)

### Function Design
- Keep functions single-purpose and explicit about their side effects; if a function starts branching on multiple concepts, split it into dedicated helpers.
- Promote reuse by composing small helpers into orchestration functions instead of piling logic into a single block.
- When a helper exists only to support another function, prefix it with `_` and keep it adjacent to the caller.

### Module Boundaries
- Grow modules around a cohesive responsibility; when a file exceeds roughly 400 lines or mixes unrelated workflows, extract logical bundles into new modules under `src/wetlands_ml_geoai/`.
- Group CLI shims, data access layers, model utilities, and evaluation logic in separate files so deployments can import only what they need.

## Geospatial & ML Conventions

### Raster Processing
- **Band ordering**: Always explicit (e.g., NAIP: R,G,B,NIR; Sentinel: B03,B04,B05,B06,B08,B11,B12)
- **NoData value**: Use `FLOAT_NODATA = -9999.0` for float32 outputs
- **Coordinate systems**: Always validate CRS consistency; reproject when necessary
- **File format**: GeoTIFF with deflate compression, tiling enabled, BIGTIFF=IF_SAFER
- **Data type**: Output float32 scaled to [0,1] for reflectance
- **Resampling**: Bilinear for continuous data (Sentinel-2), nearest for categorical (labels)

### Sentinel-2 Composites
- **Seasons**: SPR (Mar-May), SUM (Jun-Aug), FAL (Sep-Nov)
- **Bands**: Always use B03, B04, B05, B06, B08, B11, B12 (7 bands per season → 21 total)
- **Cloud masking**: Use SCL (Scene Classification Layer) to mask values {3, 8, 9, 10, 11}
- **Scaling**: Apply `1/10000` to convert to 0-1 reflectance
- **Min observations**: Default ≥3 clear pixels per season per location

### Stack Manifests
- Manifests are JSON files defining multi-source rasters (NAIP + Sentinel-2)
- Enable streaming inference without materializing huge 25-band files
- `RasterStack` class handles on-the-fly reprojection and scaling
- Always validate that manifest grid matches NAIP reference

### Model Training
- **Mask R-CNN**: For discrete wetland polygons (instance segmentation)
- **UNet**: For continuous wetland masks (semantic segmentation via segmentation-models-pytorch)
- **Input channels**: Derive from raster/manifest; support 4-band (NAIP) or 25-band (NAIP+S2)
- **Tile export**: Use `geoai.export_geotiff_tiles()` before training
- **Default hyperparams**: Document in module constants (e.g., `DEFAULT_TILE_SIZE = 512`)

### Inference
- Support both single rasters and stack manifests
- Sliding window with overlap for edge handling
- Vectorize predictions to GeoPackage with `geoai.raster_to_vector()`
- Apply confidence thresholding and minimum area filtering

## Environment & Configuration

### Environment Variables
- Prefer environment variables over hard-coded paths (use `os.getenv()` with defaults)
- Common vars: `TRAIN_RASTER_PATH`, `TRAIN_STACK_MANIFEST`, `TRAIN_LABELS_PATH`, `MODEL_PATH`, etc.
- Always provide CLI arguments as primary interface; env vars are fallback
- **Never commit** absolute paths or credentials; use `.env` files (git-ignored)

### Argument Parsing
- Use `argparse` with clear help strings
- Provide sensible defaults (via constants or env vars)
- Validate required arguments early (before heavy computation)
- Support both `--flag` and env var fallback patterns

## Data Security & Privacy

### Critical Rules
- **NEVER commit** to git:
  - Raster files (NAIP, Sentinel-2, composites)
  - Vector labels (GeoPackage, shapefile)
  - Model checkpoints (.pth files)
  - Credentials or API keys
  - Absolute client-specific paths
- Store large files in cloud storage (S3, Azure Blob, etc.)
- Scrub paths in notebooks/scripts before sharing
- Use `data/` directory for local work (already in `.gitignore`)

## Testing & Validation

### Testing Guidelines
- Minimal automated coverage currently; use `test.py` / `test_unet.py` as smoke tests
- For new features: add pytest-compatible tests under `tests/` directory
- Test naming: `test_<feature>.py`
- Mock or parameterize raster paths; avoid hard-coded private data
- Aim for at least one unit or integration test per feature

### Validation Checks
- Confirm output rasters are float32 and within [0,1] (excluding NoData)
- Print per-season observation counts for composites
- Verify band counts (7/21/25 as expected)
- Assert CRS/resolution/extent alignment for stacks

## Git Workflow

### Commits
- Write in **imperative present tense** (e.g., "Add cloud masking", "Refactor tile export")
- Prefix by scope when helpful: `train:`, `inference:`, `docs:`, `fix:`
- Keep commits focused and atomic

### Pull Requests
- Describe dataset assumptions clearly
- Attach or link verification artifacts (logs, screenshots, sample outputs)
- Call out breaking changes (e.g., new raster requirements, API changes)
- Link related issues

### Branches
- `main` - stable production code
- Feature branches: descriptive names (e.g., `feature/add-winter-season`, `fix/manifest-crs`)

## Dependencies & Setup

### Core Dependencies
- **ML/DL**: `torch`, `torchvision`, `geoai-py`
- **Geospatial**: `rasterio`, `rioxarray`, `geopandas`, `shapely`, `pyproj`
- **Sentinel-2**: `pystac`, `pystac-client`, `stackstac`
- **Processing**: `numpy`, `pandas`, `xarray`, `dask`, `scikit-image`
- See `requirements.txt` for full list

### Setup Commands
```bash
# Create virtual environment
python -m venv venv

# Activate (Windows)
venv\Scripts\activate.bat

# Install dependencies
pip install -r requirements.txt

# Dev extras (optional)
pip install -r requirements-dev.txt
```

## Common Workflows

### Sentinel-2 Composite Generation
```bash
python sentinel2_processing.py \
  --aoi data/aoi.gpkg \
  --years 2022 2023 \
  --output-dir data/s2 \
  --naip-path data/naip
```

### Training Mask R-CNN
```bash
python train.py \
  --train-raster data/naip_s2_25band.tif \
  --labels data/train_nwi.gpkg \
  --epochs 10 \
  --batch-size 4
```

### Training UNet
```bash
python train_unet.py \
  --train-raster data/naip_s2_25band.tif \
  --labels data/train_nwi.gpkg \
  --architecture unet \
  --encoder-name resnet34 \
  --epochs 25
```

### Inference
```bash
python test.py \
  --test-raster data/test_area.tif \
  --model-path models/maskrcnn_best.pth \
  --confidence-threshold 0.95
```

## AI Assistant Guidelines

When helping with this codebase:

1. **Understand the domain**: This is geospatial ML for wetland detection; be mindful of CRS, band ordering, NoData handling, and memory constraints with large rasters.

2. **Respect conventions**:
   - Helper functions start with `_`
   - Use `pathlib.Path` for file operations
   - Maintain PEP 8 style
   - Keep CLI shims thin; logic goes in `src/wetlands_ml_geoai/`

3. **Prioritize reproducibility**:
   - Use environment variables and command-line args
   - Document hyperparameters as constants
   - Avoid hard-coded paths

4. **Think streaming**:
   - Large rasters don't fit in memory
   - Stack manifests enable lazy loading
   - Prefer chunked/windowed processing

5. **Validate geospatial integrity**:
   - Always check CRS alignment
   - Verify NoData handling
   - Confirm band counts and ordering
   - Test with small AOIs before scaling up

6. **Security first**:
   - Never suggest committing data files
   - Scrub paths in examples
   - Use `.gitignore` patterns liberally

7. **Test suggestions**:
   - Propose small smoke tests for new features
   - Mock large data dependencies
   - Verify outputs are valid GeoTIFFs/GeoPackages

## Performance Considerations

- Use Dask for lazy computation on large Sentinel-2 stacks
- Enable chunking in xarray/rasterio operations
- Stream downloads; avoid loading all scenes into memory
- Leverage GDAL's virtual warping (VRT) for reprojection
- Profile memory usage with large AOIs
- Consider tiling/sharding for continental-scale processing

## Quick Reference

### File Extensions
- Rasters: `.tif`, `.tiff` (GeoTIFF)
- Vectors: `.gpkg` (GeoPackage preferred), `.shp` (shapefile)
- Manifests: `stack_manifest.json`
- Models: `.pth` (PyTorch checkpoints)

### Band Counts
- NAIP alone: 4 bands (R, G, B, NIR)
- Sentinel-2 per season: 7 bands
- Sentinel-2 composite: 21 bands (SPR + SUM + FAL)
- Full stack: 25 bands (4 NAIP + 21 Sentinel)

### Default Tile Sizes
- Tile size: 512×512 pixels
- Stride: 256 pixels (50% overlap)
- Window overlap (inference): 256 pixels

### STAC Endpoint
- Default: `https://earth-search.aws.element84.com/v1`
- Collection: `sentinel-2-l2a`

---

**Remember**: This project bridges remote sensing, geospatial analysis, and deep learning. Changes should preserve data integrity, reproducibility, and scientific rigor.

