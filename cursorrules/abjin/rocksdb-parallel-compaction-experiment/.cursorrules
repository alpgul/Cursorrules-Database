# RocksDB 성능 분석 및 실험 프로젝트 - Cursor Rules

## 📋 프로젝트 컨텍스트
이 프로젝트는 RocksDB의 성능 특성을 분석하고 최적화 방안을 도출하기 위한 학술 연구 프로젝트입니다.
주요 목표는 db_bench를 활용한 체계적인 실험을 통해 실무에 적용 가능한 튜닝 가이드라인을 제시하는 것입니다.

## 🎯 핵심 원칙

### 1. 언어 사용 규칙
- **기본 응답 언어**: 한국어 (Korean)
- **코드 주석**: 한국어로 작성
- **커밋 메시지**: 영어로 작성 (예: "Add parallel compaction analysis script")
- **변수명/함수명**: 영어 사용
- **문서화**: 한국어 (README, 분석 리포트 등)

### 2. 실험 설계 원칙
- **과학적 방법론**: 가설 → 실험 설계 → 결과 분석 → 해석 순서 준수
- **재현 가능성**: 모든 실험은 동일한 환경에서 재현 가능해야 함
- **통계적 신뢰성**: 충분한 샘플 크기와 반복 실험 고려
- **실무 적용성**: 이론적 분석보다 실제 환경에서 활용 가능한 인사이트 도출에 중점

### 3. 코드 작성 가이드라인
- **모듈화**: 실험 단계별로 함수 분리
- **로깅**: 실험 진행 상황을 상세히 기록
- **에러 처리**: 실험 중단 시나리오에 대한 적절한 처리
- **리소스 관리**: 시스템 자원 모니터링 및 정리 코드 포함

## 🔬 RocksDB 특화 규칙

### 1. 실험 주제 선정 기준
- **차별화**: 기존 벤치마크와 구별되는 참신한 접근
- **실용성**: 프로덕션 환경에서 실제로 적용 가능한 주제
- **측정 가능성**: db_bench로 정량적 분석이 가능한 지표
- **복합 분석**: 단순 성능 비교를 넘어선 다차원적 분석

### 2. 성능 분석 접근법
```
성능 지표 우선순위:
1. Throughput (처리량) - MB/s, ops/sec
2. Latency (지연시간) - P50, P95, P99
3. Resource Efficiency (자원 효율성) - CPU, Memory, I/O
4. Scalability (확장성) - 부하 증가에 따른 성능 변화
```

### 3. 실험 환경 표준화
- **하드웨어 정보**: CPU 코어 수, 메모리 크기, 스토리지 타입 명시
- **소프트웨어 버전**: RocksDB 버전, OS, 컴파일러 정보 기록
- **설정 값**: 모든 RocksDB 옵션을 명시적으로 설정
- **데이터 크기**: 메모리 대비 적절한 데이터셋 크기 선택

## 📊 스크립트 작성 가이드

### 1. 테스트 스크립트 구조
```bash
# 필수 포함 요소:
1. 환경 검증 (db_bench 존재, 권한 확인)
2. 시스템 정보 수집 (CPU, 메모리, 스토리지)
3. 리소스 모니터링 (iostat, vmstat, sar)
4. 결과 파싱 및 CSV 저장
5. 요약 리포트 자동 생성
6. 에러 처리 및 정리 코드
```

### 2. 모니터링 데이터 수집
- **시스템 메트릭**: CPU 사용률, 메모리 사용량, I/O 대역폭
- **RocksDB 메트릭**: 컴팩션 통계, 캐시 히트율, 플러시 빈도
- **성능 지표**: 처리량, 지연시간, 에러율

### 3. 결과 분석 자동화
- **CSV 포맷**: 일관된 데이터 형식으로 저장
- **그래프 생성**: Python/matplotlib 활용한 시각화
- **통계 분석**: 평균, 표준편차, 신뢰구간 계산
- **최적점 도출**: 성능 대비 비용 효율성 분석

## 🎓 학술 발표 지원

### 1. 발표 자료 구성
- **문제 정의**: 명확한 연구 동기와 목표
- **실험 설계**: 가설, 변수, 통제 조건 설명
- **결과 분석**: 데이터 시각화와 통계적 해석
- **실무 활용**: 구체적인 적용 방안과 권장사항

### 2. 평가 기준 대응
- **실험 설계의 타당성**: 논리적 가설과 체계적 방법론
- **결과 분석의 깊이**: 단순 비교를 넘어선 근본 원인 분석
- **독창성**: 기존 연구와 차별화되는 접근법
- **발표 시간**: 10-12분에 적합한 내용 범위

## 🛠 개발 워크플로우

### 1. 실험 계획 단계
```
1. 연구 질문 정의
2. 가설 수립 
3. 실험 설계 문서 작성 (markdown)
4. 검토 및 수정
```

### 2. 구현 단계
```
1. 테스트 스크립트 작성
2. 모니터링 도구 통합
3. 결과 분석 코드 개발
4. 문서화 (README, 사용법)
```

### 3. 실행 및 분석 단계
```
1. 환경 검증 및 사전 테스트
2. 본 실험 실행
3. 데이터 수집 및 정제
4. 결과 분석 및 해석
5. 발표 자료 준비
```

## 💡 AI 어시스턴트 행동 지침

### 1. 실험 주제 추천 시
- 기존에 다룬 주제와 중복 방지
- 실험 난이도와 소요 시간 고려
- 실무 적용 가능성 강조
- 구체적인 측정 지표 제시

### 2. 코드 작성 시
- 주석을 한국어로 상세히 작성
- 에러 상황에 대한 적절한 처리
- 리소스 사용량 최적화
- 크로스 플랫폼 호환성 고려

### 3. 결과 분석 지원 시
- 통계적 유의성 검증
- 실무 관점에서의 해석
- 비용 효율성 분석
- 한계점과 향후 연구 방향 제시

### 4. 문서 작성 시
- 명확하고 간결한 한국어 사용
- 코드 예시와 실행 결과 포함
- 단계별 상세한 설명
- 문제 해결 가이드 제공

## 🔍 품질 관리

### 1. 코드 품질
- 함수별 단일 책임 원칙
- 매직 넘버 대신 설정 변수 사용
- 의미 있는 변수명과 함수명
- 적절한 에러 메시지

### 2. 실험 신뢰성
- 동일 조건에서 재현 가능
- 통계적으로 충분한 샘플 크기
- 외부 변수 통제
- 결과의 일관성 검증

### 3. 문서 완성도
- 사용법 단계별 설명
- 예상 문제와 해결책
- 시스템 요구사항 명시
- 결과 해석 가이드

## 📈 성공 지표

### 1. 기술적 성공
- [ ] 안정적인 실험 실행 (에러율 < 5%)
- [ ] 정확한 데이터 수집 (모든 지표 완전 수집)
- [ ] 자동화된 분석 파이프라인
- [ ] 재현 가능한 실험 환경

### 2. 학술적 성공  
- [ ] 명확한 연구 질문과 가설
- [ ] 체계적인 실험 설계
- [ ] 통계적으로 유의한 결과
- [ ] 실무 적용 가능한 인사이트

### 3. 발표 성공
- [ ] 시간 내 완료 (10-12분)
- [ ] 청중의 이해도 향상
- [ ] 질의응답 대응 능력
- [ ] 실용적 가치 인정

이 규칙을 바탕으로 일관된 품질의 RocksDB 성능 분석 프로젝트를 진행합니다. 
