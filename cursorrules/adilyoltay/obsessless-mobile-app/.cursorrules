# ObsessLess Mobil Uygulaması - Cursor Geliştirme Kuralları
# Bu dosya, projenin "Anayasası"dır ve tüm etkileşimler için temel referans kaynağıdır.
# Vizyon: Kullanıcının OKB ile mücadelesinde "Dijital Sığınağı" olan, empatik, güvenli ve etkili bir uygulama yaratmak.

rules:
  # 1. Genel Felsefe ve Dil
  # Bu kurallar projenin ruhunu anlamasını sağlar.
  - rule: "Projenin ana dili Türkçe'dir. Tüm kullanıcıya dönük metinler (mikro-kopya), yorumlar ve değişken adları öncelikli olarak Türkçe olmalıdır. Sadece evrensel teknik terimler (props, state, function, async vb.) İngilizce kalacaktır. Dil, her zaman empatik, yargılamayan ve cesaretlendirici olmalıdır. Referans: anayasa-v2.md"
  - rule: "Uygulamada demo-ready aşamsında production ready aşamasına geçtik. Her özelliğin gerçekten çalışır durumda olması ana kuralımız."
  - rule: "Uygulamada  demo mock yada simulasyon  veri kullanma özellikle onboarding aşamsında toplanan bilgilerin analiz edilmesi ve kullanılmasını sağla.
  - rule: "Master Prompt'un 3 temel ilkesi her zaman en yüksek önceliktir: 1) Sakinlik Her Şeyden Önce Gelir (minimalist UI, yumuşak animasyonlar, parlak olmayan renkler), 2) Güç Kullanıcıdadır (kişiselleştirme, şeffaflık), 3) Zahmetsizlik Esastır (minimum tıklama, sezgisel akışlar)."
  - rule: "Tüm geliştirme, 'Privacy-First' (Gizlilik Öncelikli) prensibine dayanmalıdır. Hassas veriler asla düz metin olarak saklanmamalı, mümkün olan her yerde analizler cihaz üzerinde (on-device) yapılmalıdır. Kullanıcı izni her şeyden önce gelir."

  # 2. Teknik Yığın (Tech Stack) ve Mimari
  # Bu kurallar,  doğru teknolojileri ve desenleri kullanmasını garanti eder.
  - rule: "Uygulama, Expo SDK 51 ve React Native 0.74+ kullanılarak TypeScript ile geliştirilmektedir. Tüm kodlar 'strict' modda ve TypeScript'in en iyi pratiklerine uygun olmalıdır."
  - rule: "Backend işlemleri için Supabase kullanılmaktadır. Bu, PostgreSQL veritabanı, Native Auth, Row Level Security (RLS) ve Edge Functions içerir. Firebase veya başka bir backend servisi önerme."
  - rule: "Navigasyon için Expo Router (dosya tabanlı yönlendirme) kullanılmaktadır. `app/` dizini altındaki dosya yapısına uygun olarak yeni ekranlar ve layout'lar oluşturulmalıdır."
  - rule: "Global state yönetimi için Zustand, asenkron state ve cache yönetimi için TanStack Query (React Query) kullanılacaktır. Redux veya başka bir state yönetim kütüphanesi kullanma."
  - rule: "UI bileşenleri, `react-native-paper` gibi harici kütüphaneler yerine, projenin kendi tasarım sistemine uygun özel bileşenler (`custom components`) olarak oluşturulmalıdır. Stil için `StyleSheet.create` kullanılacaktır."
  - rule: "Offline-first yaklaşımı benimsenecektir. Kritik veriler (yeni kayıtlar, oturumlar) önce AsyncStorage'a yazılmalı, ardından Supabase ile senkronize edilmelidir."
 
  # 3. Kod Kalitesi ve Standartlar
  # Bu kurallar, kodun tutarlı, okunabilir ve sürdürülebilir olmasını sağlar.
  - rule: "Her yeni bileşen ve fonksiyon için JSDoc formatında açıklayıcı yorumlar eklenmelidir. Yorumlar, kodun ne yaptığını değil, neden yaptığını açıklamalıdır."
  - rule: "Projenin dosya yapısına sadık kal. Yeni bileşenler `src/components`, ekranlar `app/`, servisler `src/services`, hook'lar `src/hooks`, store'lar `src/store` dizinlerine oluşturulmalıdır."
  - rule: "Tüm UI bileşenleri erişilebilirlik (accessibility) göz önünde bulundurularak tasarlanmalıdır. `accessibilityLabel`, `accessibilityRole` gibi proplar mutlaka kullanılmalıdır."
  - rule: "Tüm asenkron işlemler ve API çağrıları için robust error handling (hata yönetimi) ve loading states (yüklenme durumları) eklenmelidir. Kullanıcı asla belirsizlik içinde bırakılmamalıdır."
  - rule: "Animasyonlar için `react-native-reanimated`, dokunsal geri bildirim için `expo-haptics` kullanılacaktır. Animasyonlar 'Sakinlik' ilkesine uygun olarak yumuşak ve akıcı olmalıdır."
  - rule: "Hataları çözerken kodu derinlemesine ve detaylı incele ve kalıcı çözümler geliştiemeye çalış."
  - rule: "kod fonksiyon class dosya duplikasyonu olmaması için önlem al"

  # 4. Doküman Bakım Politikası
  - rule: "Aşağıdaki çekirdek doküman seti tek gerçek kaynaktır ve değişiklik gerektiren sprintlerde güncellenmeleri zorunludur: README.md, docs/ARCHITECTURE_OVERVIEW.md, docs/AI_OVERVIEW.md, docs/FEATURE_STATUS_MATRIX.md, docs/DEVELOPMENT_ROADMAP_2025.md, docs/CONTRIBUTING_AND_SETUP.md, docs/TESTING_STRATEGY_OVERVIEW.md, docs/UX_DESIGN_GUIDE.md, docs/security-guide.md."
  - rule: "Konsolidasyon politikası: Çakışan/tekrarlı içerikler birleştirilir; eski sürümler `archive/` klasörüne taşınır."
  - rule: "Her PR için `npm run validate:docs` çalıştırılır; eksik veya sapma varsa PR'da düzeltme yapılır."

commands:
  # 1. Yeni Bileşen Oluşturma Komutları
  - command: new-component
    prompt: "Referans belgelerdeki tasarım ilkelerine ve mevcut kod yapısına uygun olarak, `src/components/` altında `{1}` adlı yeni bir React Native bileşeni oluştur. Dosya yapısı şu şekilde olsun: `src/components/{2}/{1}.tsx`. Bileşen, TypeScript ile yazılmış fonksiyonel bir bileşen olmalı, props arayüzü tanımlanmalı ve stiller için `StyleSheet.create` kullanmalıdır. Temel bir JSDoc açıklaması ekle."
  - command: new-screen
    prompt: "Expo Router yapısına uygun olarak, `app/` dizini altında `{1}` adlı yeni bir ekran oluştur. Bu ekran, temel bir `View` ve `Text` içermeli ve `expo-router`'dan `Stack` veya `Tabs` kullanarak başlık gibi temel seçenekleri ayarlamalıdır. Ekranın bir `ScreenWrapper` bileşeni içinde olduğundan emin ol."

  # 2. State Yönetimi Komutları
  - command: new-store
    prompt: "Zustand ve TypeScript kullanarak `src/store/` dizininde `{1}Store.ts` adında yeni bir state management store oluştur. Store, `{2}` adında bir state arayüzü tanımlamalı ve `{3}` gibi temel eylemleri (actions) içermelidir. Gerekirse, `persist` middleware'i ile AsyncStorage entegrasyonunu da ekle."

  # 3. Veri ve API Komutları
  - command: new-query-hook
    prompt: "TanStack Query (React Query) kullanarak `src/hooks/` dizininde `{1}` için yeni bir custom hook dosyası oluştur. Bu dosya, `{2}` adında bir `useQuery` hook'u (veri çekmek için) ve `{3}` adında bir `useMutation` hook'u (veri yazmak/güncellemek için) içermelidir. Mutation hook'u, başarı durumunda `queryClient.invalidateQueries` kullanarak ilgili query'leri geçersiz kılmalıdır."
  - command: new-edge-function
    prompt: "Supabase Edge Function oluşturmak için bir iskelet kod sağla. Bu fonksiyon, Deno ve TypeScript kullanmalı, `supabase-js` istemcisini import etmeli, CORS header'larını doğru bir şekilde ayarlamalı ve temel bir request/response yapısı içermelidir. Fonksiyonun adı `{1}` olsun ve `{2}` gibi bir amaç için kullanılsın."

  # 4. AI ve Gelişmiş Özellikler Komutları
    prompt: "Projenin referans belgesindeki 'Gelişmiş Prompt Şablonları' bölümünü temel alarak, `{1}` senaryosu için bir LLM prompt şablonu oluştur. Prompt, `{2}` gibi bir amaca hizmet etmeli ve projenin empatik, terapötik ve güvenli dil ilkelerine tam olarak uymalıdır."
  - command: new-telemetry-event
    prompt: "`src/telemetry/aiTelemetry.ts` dosyasındaki `trackAIInteraction` fonksiyonunu kullanarak, `{1}` adlı yeni bir telemetri olayı için bir çağrı oluştur. Bu olay, `{2}` gibi meta verileri içermeli ve gizlilik ilkelerine uygun olmalıdır."