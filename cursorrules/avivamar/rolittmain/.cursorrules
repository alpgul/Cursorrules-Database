[
  {
    "name": "rolitt 品牌",
    "description": "针对 Next.js 15 项目的配置，使用 Tailwind CSS、TypeScript、shadcn/ui、国际化及动画库的开发规范",
    "version": "1.1.0",
    "rules": [
      {
        "name": "项目结构",
        "description": "遵循 Next.js App Router 结构并进行国际化组织",
        "pattern": "**/*",
        "recommendations": [
          "使用 app 目录作为 App Router 组件的根目录",
          "将多语言内容放在 app/[lang] 目录中，实现国际化",
          "使用 TypeScript 编写并导出所有组件",
          "将可复用的组件放在 components/ 目录，子目录命名统一",
          "工具函数和共享逻辑存放在 lib/ 目录",
          "所有类型定义集中管理，可放在 types/ 目录或就近放置",
          "保持统一的目录层级，遵循约定式结构，利于团队协作和维护"
        ]
      },
      {
        "name": "样式规范",
        "description": "使用 Tailwind CSS，配合品牌色及 shadcn/ui 组件库进行统一的样式管理",
        "pattern": "**/*.css,**/*.tsx,**/*.jsx",
        "recommendations": [
          "在 tailwind.config.js 中添加品牌主色 #EBFF7F 并配置主题",
          "遵循 shadcn/ui 组件的最佳实践，保持 UI 一致性",
          "在 globals.css 中定义 CSS 变量管理主题值和品牌色",
          "优先使用 Tailwind 的工具类代替自定义 CSS",
          "保证良好的响应式设计和多设备兼容性",
          "使用 dark: 前缀在 Tailwind 中支持暗色模式",
          "为所有样式变更记录必要的变更文档"
        ]
      },
      {
        "name": "国际化",
        "description": "支持多语言，确保网站在全球范围内可用",
        "pattern": "**/*",
        "recommendations": [
          "使用 Next.js 的内置国际化和 App Router 进行多语言路由",
          "在 app/[lang] 目录中按语言划分页面",
          "将翻译内容存放在 public/locales/{lang}/common.json 文件中",
          "使用 next-intl 管理多语言资源",
          "在项目中添加语言切换器组件，放置于全局布局 header 中",
          "所有文案内容均应外部化，避免硬编码",
          "在 SEO 层面增加 hreflang 标签，确保搜索引擎正确识别多语言"
        ]
      },
      {
        "name": "shadcn/ui 集成",
        "description": "正确集成和使用 shadcn/ui 组件库，保持统一的 UI 风格",
        "pattern": "**/*.tsx,**/*.jsx,**/*.css",
        "recommendations": [
          "参考官方文档 https://ui.shadcn.com/docs/installation 进行配置",
          "运行 `npx shadcn-ui@latest init` 进行初始化",
          "使用 `npx shadcn-ui@latest add [component-name]` 按需添加组件",
          "将 shadcn/ui 组件放置在 components/ui/ 目录，并保持一致命名",
          "在 globals.css 中自定义主题并使用品牌色 #EBFF7F",
          "在 Storybook 中为自定义组件编写演示文档",
          "记录组件的使用方式及变更日志"
        ]
      },
      {
        "name": "动画实现",
        "description": "使用 Framer Motion 和 MagicUI 实现流畅的动效",
        "pattern": "**/*.tsx,**/*.jsx",
        "recommendations": [
          "使用 `npm install framer-motion` 安装 Framer Motion",
          "在 lib/animations.ts 中集中管理可复用的动画配置",
          "使用 motion 组件为元素添加动画",
          "在页面间切换时使用 AnimatePresence 实现过渡动画",
          "为常用组件设计动画模板并复用",
          "使用 MagicUI 增强交互体验，提升用户感知",
          "尊重用户减少动画的偏好，使用 useReducedMotion 进行处理"
        ]
      },
      {
        "name": "SEO 优化",
        "description": "全站 SEO 最佳实践",
        "pattern": "**/*.tsx,**/*.jsx,**/*.ts,**/*.js",
        "recommendations": [
          "使用 Next.js Metadata API 设置页面元信息",
          "动态内容使用 generateMetadata 进行生成",
          "正确设置 Open Graph 和 Twitter Card 元数据",
          "使用 next-sitemap 生成 sitemap.xml 和 robots.txt",
          "保证 HTML 结构语义化，保持 heading 层级合理",
          "使用 next/image 优化图片，包含 alt 文本",
          "为多语言页面设置 hreflang 标签"
        ]
      },
      {
        "name": "路由规范",
        "description": "保持整洁的 URL 结构和 SEO 友好",
        "pattern": "app/**/*",
        "recommendations": [
          "URL 命名使用描述性 kebab-case 格式",
          "多语言页面使用 /en/、/fr/ 等前缀",
          "避免过深的 URL 结构，保持可读性和 SEO",
          "动态内容页使用动态路由",
          "保持多语言路由结构一致",
          "每种语言都提供 404 页面和错误处理页面"
        ]
      },
      {
        "name": "数据库集成",
        "description": "Drizzle ORM 使用规范",
        "pattern": "**/*.ts,**/*.js",
        "recommendations": [
          "在 db/schema 目录中创建数据模型",
          "严格按照 Drizzle ORM 官方文档进行配置",
          "使用 .env 文件存储数据库连接字符串，避免泄露",
          "所有数据库变更使用迁移脚本进行版本管理",
          "封装数据库操作在独立的 repository 或 service 中",
          "为数据库操作编写单元测试，保证稳定性"
        ]
      },
      {
        "name": "代码质量",
        "description": "保持高质量、可维护的代码标准",
        "pattern": "**/*.tsx,**/*.ts,**/*.jsx,**/*.js",
        "recommendations": [
          "使用 ESLint 和 Prettier 进行代码风格统一",
          "使用 Vitest、Testing Library 和 Playwright 进行测试",
          "复杂逻辑必须添加注释，便于后期维护",
          "为所有可复用组件编写 Storybook stories",
          "严格遵循 commitlint 规范，保持提交历史清晰",
          "TypeScript 严格模式，不使用 any 类型（除非特别需要）",
          "每次 PR 前进行代码审查（Code Review）"
        ]
      },
      {
        "name": "性能优化",
        "description": "优化网站性能，保证用户体验",
        "pattern": "**/*",
        "recommendations": [
          "尽量使用服务器组件减少客户端 JS 体积",
          "使用 next/image 优化图片加载",
          "使用 next/font 提高字体加载性能",
          "为客户端组件使用 React.lazy 和 Suspense 实现代码分割",
          "next/script 优化第三方脚本的加载顺序",
          "监控并优化 Core Web Vitals 指标"
        ]
      },
      {
        "name": "无障碍性",
        "description": "确保网站对所有用户友好，符合 WCAG 标准",
        "pattern": "**/*.tsx,**/*.jsx",
        "recommendations": [
          "全站使用语义化 HTML 元素",
          "在必要时使用 ARIA 属性辅助屏幕阅读器",
          "品牌色 #EBFF7F 的使用需保证足够的对比度",
          "确保所有交互元素均可通过键盘访问",
          "为交互元素添加明显的焦点样式",
          "至少满足 WCAG 2.1 AA 标准"
        ]
      },
      {
        "name": "分析工具集成规范",
        "description": "基于 Google 最佳实践的分析工具集成指导原则",
        "pattern": "src/components/analytics/**/*.tsx, src/lib/analytics/**/*.ts, src/app/[locale]/layout.tsx, .env*.local",
        "recommendations": [
          "必须使用 Next.js Script 组件加载所有第三方分析脚本",
          "根据脚本重要性选择合适的 strategy: beforeInteractive（关键脚本）、afterInteractive（重要分析脚本如 GA、Clarity）、lazyOnload（营销脚本如 Meta Pixel、TikTok Pixel）",
          "组件架构：AnalyticsProvider.tsx 作为统一提供者，services/ 目录存放各分析服务组件，hooks/ 目录存放分析相关 Hook",
          "性能优化：最小化 First Load JS，使用动态导入，非关键脚本延迟 3 秒加载，定期使用 @next/bundle-analyzer 分析包大小",
          "环境变量管理：所有分析工具配置通过 Env.ts 统一管理，确保类型安全",
          "条件加载：实现基于环境和用户偏好的条件加载机制",
          "错误处理：为所有分析脚本添加错误处理和降级方案",
          "开发流程：先分析再实施，渐进式优化，持续监控 Core Web Vitals 指标"
        ]
      },
      {
        "name": "CI/CD 流程",
        "description": "持续集成和持续部署的流程和规范",
        "pattern": ".github/workflows/**/*.yml, .gitlab-ci.yml",
        "recommendations": [
          "为项目配置 GitHub Actions 或 GitLab CI 流水线",
          "包含自动化测试、Lint、Build 和部署步骤",
          "在合并 PR 前强制执行测试和 Lint",
          "配置 preview 环境便于功能预览",
          "保证主分支的构建和部署自动化"
        ]
      },
      {
        "name": "安全性",
        "description": "保障网站和用户数据的安全",
        "pattern": "**/*.ts,**/*.tsx,**/*.js,**/*.jsx",
        "recommendations": [
          "避免在客户端暴露敏感信息，使用 .env 文件管理机密",
          "定期进行依赖包安全扫描，及时修补漏洞",
          "对于 API 请求，进行输入校验和输出过滤",
          "合理配置 Content Security Policy (CSP)",
          "使用 HTTPS 保障数据传输安全"
        ]
      }
    ],
    "settings": {
      "importOrder": [
        "^(react|next)(.*)$",
        "^@/components/(.*)$",
        "^@/lib/(.*)$",
        "^@/styles/(.*)$",
        "^@/(.*)$",
        "^[./]"
      ],
      "componentStructure": [
        "imports",
        "types",
        "component",
        "exports"
      ],
      "preferredQuotes": "single",
      "indentSize": 4,
      "maxLineLength": 80,
      "preferredLanguage": "typescript"
    }
  },
  {
    "name": "页面开发要求",
    "description": "规范每个页面的开发模式、结构以及与数据交互的模式",
    "pattern": "app/**/*.{tsx,ts,jsx,js}",
    "recommendations": [
      "每个页面都必须使用 TypeScript，并定义清晰的 Props 类型",
      "合理选择布局组件（layout.tsx）统一页面结构",
      "使用 Suspense 和 loading.tsx 处理页面级的加载状态",
      "复杂的逻辑组件可拆分成独立模块，避免文件过长",
      "数据请求优先使用服务器组件进行 SSR 或 SSG 渲染",
      "对于需要用户交互的模块，封装为 Client Component（'use client'）",
      "必要时进行代码拆分，避免页面体积过大"
    ]
  },
  {
    "name": "渲染模式要求",
    "description": "明确 SSR、SSG、ISR、CSR 等渲染模式的使用场景及要求",
    "pattern": "app/**/*.{tsx,ts,jsx,js}",
    "recommendations": [
      "对 SEO 友好的页面必须优先考虑 SSR 或 SSG",
      "频繁更新的数据可使用 ISR 或 SWR 客户端请求",
      "对于需要用户登录或鉴权的页面，可采用 SSR 并结合 Session/Cookie",
      "静态页面优先考虑 SSG（减少服务器负载）",
      "纯交互型模块（例如动态动画）可采用 CSR（use client）",
      "禁止无必要的全局客户端渲染，避免性能损失",
      "在 PR 中明确说明选择的渲染模式及理由"
    ]
  },
  {
    "name": "代码质量",
    "description": "保持高质量、可维护的代码标准，严格的类型定义",
    "pattern": "**/*.tsx,**/*.ts,**/*.jsx,**/*.js",
    "recommendations": [
      "使用 ESLint 和 Prettier 进行代码风格统一",
      "使用 Vitest、Testing Library 和 Playwright 进行测试",
      "复杂逻辑必须添加注释，便于后期维护",
      "所有可复用组件必须在 Storybook 中编写 stories",
      "严格遵循 commitlint 规范，保持提交历史清晰",
      "TypeScript 严格模式，禁止 any 类型（除非绝对必要，并需加注释）",
      "组件 Props 必须定义显式的接口类型",
      "组件或函数必须明确返回类型，避免隐式推导导致的问题",
      "模块导出时尽量使用命名导出，避免默认导出带来的可维护性问题",
      "每次 PR 前进行 Code Review，保证代码质量"
    ]
  }
]