Welcome to Yagi, a DSP library in Rust. Yagi is created by rewriting the liquid-dsp library from C.

When rewriting liquid-dsp functions, please preserve any comments and docstrings.

Any CONTEND_DELTA functions in C should be replaced with assert_relative_eq! in Rust 

Whenever an error tolerance (tol) is specified in a C test, it should be preserved when translated to Rust. Each test function should maintain the same tolerance as the original C test function.

When rewriting a liquid-dsp autotest test to Rust, if the original function name starts with autotest, then the Rust test should have a autotest_annotate annotation containing the original function name. For example, if the liquid-dsp function is named autotest_foo, then the Rust test should be annotated #[autotest_annotate(autotest_foo)]. If a test was not translated from liquid-dsp, do not include this annotation.

When a struct includes a generic type T, if the type can be either Real or Complex, then include `ComplexFloat<Real = f32>` as a trait bound. This will require `use num_complex::ComplexFloat`.
