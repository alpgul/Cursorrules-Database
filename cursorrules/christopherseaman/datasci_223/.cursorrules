## Meta-Instruction

- **Audience Assessment:** Create content for health data science masters students who are beginners in programming (Python, git, shell commands)
- **Continuous Evaluation:** Before generating each section, ensure content matches student level, balances concept / reference / example
- **Time Structure:** Design for 90-minute lectures, with maximum 60 slides if using Marp. Otherwise, long-form Markdown.
- **Demo Integration:** Include 3 hands-on demo breaks (at ⅓, ⅔, and end points)

## Environment Management

- **Working Directory:** Working directory should always be repo root
- **Directory Changes:** Do not use cd or otherwise change directory
- **Package Management:** Use `uv` and `uv pip` to manage `.venv` in repo root
- **Package Installation:** Install packages by adding to requirements.txt and uv pip install -r requirements.txt

## Core Principles

### 1. Format & Structure

- **Markdown Format:** Create lectures in long-form Markdown or, only if requested, in marp markdown slide format (separated by `---`).
- **Progressive Learning:** Structure content to build knowledge incrementally
- **Visual Organization:** Use consistent heading levels, bullet points, and white space

Example section (complex topics may span multiple sections, only need the reference card/example at least once):

#### Random forest

"""
<!Random forests are powerful and robust for tabular health data. They combine many decision trees, each trained on a random subset of the data, and vote on the final prediction. Beginners sometimes think more trees always means better results, but too many can slow things down.
--->

Each of the steps can be tweaked, but the general flow goes:

1. **Bagging** - create _k_ random samples from the data set
2. **Grow trees** - individual decision trees are constructed by choosing the best features and cutpoints to separate the classes
3. **Classify** - instances are run through all trees and assigned a class by majority vote

**Reference Card: `RandomForestClassifier`**

- **Function:** `sklearn.ensemble.RandomForestClassifier()`
- **Purpose:** Ensemble of decision trees for classification
- **Key Parameters:**
    - `n_estimators`: (Optional, default=100) The number of trees in the forest. More trees generally improve performance but increase computation time
    - `max_depth`: (Optional, default=None) The maximum depth of each tree. If `None`, nodes are expanded until all leaves are pure or contain less than `min_samples_split` samples. Deeper trees can capture more complex patterns but risk overfitting
    - `random_state`: (Optional, default=None) Controls the randomness of the bootstrapping of the samples used when building trees and the sampling of the features to consider when looking for the best split at each node. Setting a specific number ensures reproducibility
    - `parameter`: (Optional/Required, default=XXX) Brief summary of what `parameter` is and does in a sentence or two. No commentary.
**Minimal Example:**

```python
from sklearn.ensemble import RandomForestClassifier
X = [[1, 2], [2, 3], [3, 4], [4, 5]]
y = [0, 1, 0, 1]
model = RandomForestClassifier(n_estimators=10).fit(X, y)
print(model.predict([[2, 2]]))
```

<!This code fits a random forest and predicts a class. Beginners sometimes forget to set a random seed for reproducibility or to check feature importances.
--->

<!---
This diagram illustrates the concept of Bagging (Bootstrap Aggregating), which is the core idea behind Random Forests.
1.  **Original Dataset:** We start with our full dataset (imagine a spreadsheet of patient data).
2.  **Bootstrap Samples:** We create multiple new datasets by sampling *with replacement* from the original. This means some patients might appear multiple times in a sample, while others might be left out. Each sample is roughly the same size as the original. Think of it like drawing names from a hat, putting the name back each time.
3.  **Train Models:** We train a separate decision tree on each of these bootstrap samples. Because each tree sees slightly different data, they will learn slightly different patterns.
4.  **Aggregate Predictions:** For a new patient, we run their data through *all* the trees. For classification, each tree "votes" for a class, and the class with the most votes wins. For regression, we average the predictions. This ensemble approach makes the final prediction more robust and less prone to overfitting than a single decision tree. It's the wisdom of the crowd, but for trees!
--->
![Bagging diagram](media/bagging.png)
"""

### 2. Content Balance

- **Conceptual Foundations:** Explain how things work in accessible terms
- **Reference Material:** Include function definitions, syntax rules, and common parameters
- **Practical Examples:** Provide executable code samples with grounded applications

### 3. Teaching Approach

- **Beginner-Friendly:** Avoid jargon, explain terms when introduced
- **Visual Learning:** Use diagrams, analogies, screenshots, and concrete examples/outputs
- **Engagement:** Include comprehension checkpoints and practice opportunities
- **Misconceptions:** Address common beginner mistakes 

### 4. Tone & Style

- **Professional but Engaging:** Maintain educational focus while being approachable
- **Strategic Humor:** Include occasional nerdy puns (xkcd-style) and cheesy pop culture references (80s/90s movies)
- **Visual Cues:** Use emoji and formatting to highlight key points and create visual interest
- **Clear Annotations:** Comment key lines within code examples

### 5. Demo Break Structure

- **Hands-On Learning:** Design 3 practical demo sessions (10-15 minutes each)
- **Progressive Difficulty:** Start simple, build complexity across demos
- **Clear Instructions:** Provide step-by-step guidance with expected outcomes as markdown cells
- **Success Validation:** Include ways to confirm students completed tasks correctly
- **Markdown Notebooks:** Format the demos as markdown documents to be converted into jupyter notebooks using jupytext

### 6. Directory Structure

- **NOTE:** Use underscores instead of spaces for all filenames
- **Root Level:**
    - `lectures/`: Main lecture content
    - `refs/`: Reference materials and resources
    - `site/`: Generated documentation
    - `overrides/`: Theme customizations
    - Configuration files (`.gitignore`, `requirements.txt`, etc.)

- **Lecture Structure (`lectures/XX/`):**
    - `lecture_XX.md`: Main lecture content (where XX is two-digit lecture number)
    - `media/`: Directory for lecture-specific media
        - Images (`.png`, `.jpg`, `.webp`)
        - Videos (`.mp4`, `.webm`)
        - PDFs (`.pdf`)
    - `demo/`: Demo materials
        - `01-DEMO_TOPIC.md`: First demo
        - `02-DEMO_TOPIC2.md`: Second demo
        - etc.
    - `assignment/`: (Optional) Assignment materials

- **References Structure (`refs/`):**
    - Topic-specific markdown files
    - Resource subdirectories
    - External resource collections
