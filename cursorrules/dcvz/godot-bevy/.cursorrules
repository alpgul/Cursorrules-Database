# godot-bevy Cursor Rules

## Project Overview
This is a Rust library that integrates Bevy's Entity Component System (ECS) with the Godot game engine. The project enables developers to use Bevy's high-performance ECS within Godot projects.

## Language & Framework Guidelines

### Rust Best Practices
- Use Rust 2024 edition conventions
- Follow the Rust API Guidelines for public APIs
- Prefer `impl Trait` over explicit generics where appropriate
- Use `#[must_use]` for functions that return important values
- Always handle `Result` types explicitly - never use `unwrap()` in library code
- Use `expect()` with descriptive messages for panics that should never happen
- Prefer pattern matching over `if let` chains when handling multiple variants

### Bevy ECS Patterns
- Use the `Query` system for accessing components and entities
- Prefer system parameters over direct world access
- Use `Commands` for deferred entity/component operations
- Follow Bevy's naming conventions: `PascalCase` for components, `snake_case` for systems
- Use `#[derive(Component)]` for all component structs
- Use `#[derive(Resource)]` for singleton resources
- Group related systems using `SystemSet`s
- Use `ResMut` and `Res` appropriately for mutable/immutable resource access

### Godot Integration
- Use `godot::prelude::*` for common Godot types
- Prefer Godot's built-in types (Vector2, Vector3, Transform2D, Transform3D) over custom implementations
- Use proper signal handling patterns with `GodotSignal` events
- Handle Godot node references safely with proper lifetime management
- Use `GodotScene` for scene spawning from ECS systems

## Code Style & Formatting

### General Style
- Use 4 spaces for indentation (standard Rust)
- Line length limit: 100 characters
- Use trailing commas in multi-line function calls and struct definitions
- Group imports: std, external crates, local modules
- Use `#[inline]` for small, frequently called functions
- Document all public APIs with /// comments

### Naming Conventions
- Components: `PlayerComponent`, `TransformComponent`
- Resources: `GameStateResource`, `InputResource`
- Systems: `update_player_movement`, `handle_collision_events`
- Events: `PlayerDeathEvent`, `ScoreChangedEvent`
- Plugins: `PlayerPlugin`, `CollisionPlugin`

### Error Handling
- Create custom error types for the library using `thiserror`
- Use `Result<T, E>` for fallible operations
- Provide meaningful error messages with context
- Use `anyhow` in examples and tests, custom errors in library code

## Architecture Patterns

### Plugin Structure
- Each major feature should be its own plugin
- Use `impl Plugin for MyPlugin` pattern
- Group related systems, components, and resources in the same plugin
- Use plugin configuration structs for customization

### System Organization
- Physics systems go in `PhysicsUpdate` schedule
- Visual systems go in `Update` schedule
- UI systems go in `PostUpdate` schedule
- Use proper system ordering with `.before()` and `.after()`

### Component Design
- Keep components small and focused on a single responsibility
- Use composition over inheritance patterns
- Prefer data-oriented design
- Use `#[reflect(Component)]` for debugging support

## File Organization

### Directory Structure
- `/src/lib.rs` - Main library entry point
- `/src/prelude.rs` - Common exports
- `/src/plugins/` - Feature plugins
- `/src/bridge/` - Godot-Bevy bridge code
- `/src/watchers/` - System watchers and monitors
- `/examples/` - Complete example projects

### Module Organization
- Each plugin gets its own module file
- Group related functionality in submodules
- Use `mod.rs` files for module organization
- Export public APIs through `prelude.rs`

## Documentation Standards

### Code Documentation
- Document all public functions, structs, and traits
- Include usage examples in doc comments
- Use `# Examples` sections for complex APIs
- Document safety requirements for unsafe code
- Include performance considerations where relevant

### Example Code
- Every example should be a complete, runnable Godot project
- Include both Rust and Godot scene files
- Provide clear README files for each example
- Show best practices, not just functionality

## Testing Guidelines

### Unit Tests
- Test all public APIs
- Use property-based testing for complex algorithms
- Mock Godot dependencies where possible
- Test error conditions and edge cases

### Integration Tests
- Test Bevy-Godot integration points
- Verify transform synchronization
- Test signal handling
- Validate performance characteristics

## Performance Considerations

### ECS Performance
- Minimize component queries in hot loops
- Use `Query::iter()` over `Query::for_each()` when possible
- Bundle related components together
- Use `Changed<T>` filters to reduce unnecessary work

### Godot Interop
- Cache Godot node references when safe
- Minimize cross-boundary calls in tight loops
- Use batched operations for multiple Godot calls
- Profile transform synchronization overhead

## Version Compatibility

### Dependencies
- Bevy 0.16.x
- Godot-rust 0.2.4
- Godot 4.2.x
- Maintain compatibility matrix in README

### Breaking Changes
- Follow semantic versioning strictly
- Document migration paths for breaking changes
- Provide deprecation warnings before removal
- Keep compatibility shims for at least one minor version

## Common Patterns

### Automatic Component Generation
```rust
// Use #[derive(BevyComponent)] to auto-generate Bevy components from Godot exports
#[derive(GodotClass, BevyComponent)]
#[class(base=Area2D)]
#[bevy_component("Player")]  // Custom component name
pub struct PlayerNode {
    base: Base<Area2D>,
    #[export]
    speed: f32,
    #[export]
    health: i32,
}

// Automatically generates:
// - Player component struct
// - PlayerAutoSyncPlugin for automatic syncing
// - All sync methods

// Setup once in your app
app.add_plugins(PlayerAutoSyncPlugin);

// Spawn with smart bundle
commands.spawn(GodotSceneWithComponent::<Player>::from_resource(asset));
```

### Signal Handling
```rust
fn handle_signals(mut events: EventReader<GodotSignal>) {
    for signal in events.read() {
        match signal.name.as_str() {
            "pressed" => { /* handle button press */ },
            _ => {},
        }
    }
}
```

### Transform Sync
```rust
fn sync_transforms(
    mut query: Query<(&Transform2D, &mut Transform), Changed<Transform2D>>
) {
    for (godot_transform, mut bevy_transform) in query.iter_mut() {
        // Sync logic here
    }
}
```

### Scene Spawning
```rust
fn spawn_scene(mut commands: Commands) {
    commands.spawn(GodotScene::from_path("res://scenes/enemy.tscn")
        .with_translation3d(Vector3::new(0.0, 1.0, 0.0)));
}
```

## Debugging & Development

### Logging
- Use `bevy::log` for consistent logging
- Log at appropriate levels (error, warn, info, debug, trace)
- Include entity IDs in ECS-related logs
- Use structured logging for performance metrics

### Development Tools
- Enable Bevy's development features in debug builds
- Use `#[cfg(debug_assertions)]` for debug-only code
- Provide debugging utilities for common issues
- Include timing information for performance analysis

Remember: This library bridges two different paradigms (ECS and scene tree), so always consider the implications of operations on both sides of the integration. 