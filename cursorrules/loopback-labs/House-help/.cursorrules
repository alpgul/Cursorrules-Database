# House Help App - Theme and Styling Rules

## Theme System Overview

This React Native app uses a comprehensive theme system with light and dark modes. Always ensure consistent theme usage across all components.

### Theme Structure

- **Primary Colors**: Light (#A1E4B6), Dark (#6DB28F) - Main brand color
- **Secondary Colors**: Light (#F5F5F5), Dark (#2B303B) - Supporting backgrounds
- **Accent Colors**: Light (#F76C5E), Dark (#E35B52) - Highlights and buttons
- **Text Colors**: Light (#2E3D59), Dark (#D0F4D8) - Primary text
- **Background Colors**: Light (#FCEED9), Dark (#1C2431) - Main backgrounds

## Theme Usage Rules

### 1. Always Use Theme Hooks

- Use `useTheme()` from `@react-navigation/native` for accessing navigation theme
- Use `useThemeColor()` from `@/hooks/useThemeColor` for Colors.ts color access
- Use custom `useTheme()` from `@/hooks/useTheme` for app-specific theme colors

### 2. Preferred Theme Components

Always use themed components when available:

- `ThemedText` instead of raw `Text` - automatically applies theme text color
- `ThemedView` instead of raw `View` - automatically applies theme background color
- Import from: `@/components/ThemedText` and `@/components/ThemedView`

### 3. Color Usage Guidelines

- **NEVER** hardcode colors like `#FFFFFF`, `black`, `red`, etc.
- **ALWAYS** use theme colors: `theme.colors.primary`, `theme.colors.background`, etc.
- For custom colors, define them in both light and dark variants
- Use `backgroundColor` prop on ThemedView for different background variants

### 4. Component Styling Pattern

When creating new components, follow this pattern:

```typescript
import { useTheme } from '@react-navigation/native';
import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';

export const MyComponent = () => {
  const theme = useTheme();
  
  return (
    <ThemedView style={[styles.container, { borderColor: theme.colors.border }]}>
      <ThemedText type="title">Title</ThemedText>
      <ThemedText>Body text</ThemedText>
    </ThemedView>
  );
};
```

### 5. StyleSheet Guidelines

- Define styles using StyleSheet.create()
- Apply theme colors in component render, not in StyleSheet
- Use theme colors for: backgroundColor, color, borderColor, shadowColor
- Example:

```typescript
const styles = StyleSheet.create({
  container: {
    padding: 16,
    borderRadius: 8,
    // Don't put colors here - apply in component
  },
});
```

### 6. Text Typography

ThemedText supports these types:

- `title`: 24px, bold - for main headings
- `subtitle`: 18px, 600 weight - for section headers  
- `body`: 16px - for regular text (default)
- `small`: 14px - for secondary text

### 7. Theme-Aware Icons

- Use theme colors for icon tinting
- Access via `theme.colors.text` or `theme.colors.primary`
- Consider icon visibility in both light and dark modes

### 8. Background Hierarchies

Use appropriate background colors:

- `background`: Main screen background
- `card`: Component/card backgrounds  
- `secondary`: Alternative background areas

### 9. Interactive Elements

- Use `theme.colors.primary` for primary buttons/actions
- Use `theme.colors.accent` for secondary actions/highlights
- Ensure sufficient contrast in both themes

### 10. Testing Theme Consistency

- Test all components in both light and dark modes
- Use device settings or color scheme toggle to verify
- Ensure text remains readable and UI remains usable

## Quick Reference

- Theme hook: `const theme = useTheme();`
- Colors: `theme.colors.primary`, `theme.colors.text`, etc.
- Themed components: `<ThemedText>`, `<ThemedView>`
- Color scheme detection: Handled automatically by hooks

## Anti-Patterns to Avoid

- ❌ Hardcoded colors: `backgroundColor: '#FFFFFF'`
- ❌ Raw Text/View without theming: `<Text>` instead of `<ThemedText>`
- ❌ Colors in StyleSheet: Define layout only, apply colors in render
- ❌ Assuming light mode: Always consider dark mode appearance
- ❌ Inconsistent color usage: Stick to defined theme colors

Remember: Every UI element should respect the current theme and provide a consistent experience across light and dark modes.

---

# React Native Elements Design System

## Design Philosophy

This app follows a minimal, iOS-style design philosophy using React Native Elements as the primary design system. All components should feel native, clean, and intuitive across platforms while maintaining our established color theme.

### Core Design Principles

1. **Minimal & Clean**: Less is more - remove unnecessary elements
2. **iOS-Inspired**: Follow iOS Human Interface Guidelines for consistency
3. **Cross-Platform Native Feel**: Components should feel native on both iOS and Android
4. **Consistent Spacing**: Use standardized spacing scale (4, 8, 12, 16, 20, 24, 32px)
5. **Subtle Interactions**: Gentle animations and micro-interactions
6. **Accessibility First**: All components must be accessible and screen-reader friendly

## React Native Elements Integration

### 1. Component Library Usage

**Primary Components to Use:**

- `Button` - For all button interactions
- `Input` - For text inputs with consistent styling
- `Card` - For grouped content with subtle elevation
- `ListItem` - For consistent list layouts
- `Header` - For screen headers and navigation
- `Divider` - For content separation
- `Badge` - For status indicators and counts
- `Icon` - For all iconography using Ionicons
- `Overlay` - For modals and popup content

**Import Pattern:**

```typescript
import {
  Button,
  Input,
  Card,
  ListItem,
  Header,
  Divider,
  Badge,
  Icon,
  Overlay
} from 'react-native-elements';
```

### 2. Theme Integration with RNE

**Configure React Native Elements with our existing theme:**

```typescript
import { ThemeProvider, createTheme } from 'react-native-elements';

const theme = createTheme({
  lightColors: {
    primary: '#A1E4B6',
    secondary: '#F5F5F5', 
    success: '#4CAF50',
    warning: '#FF9800',
    error: '#F76C5E',
    text: '#2E3D59',
    grey0: '#393e42',
    grey1: '#43484d',
    grey2: '#5e6977',
    grey3: '#86939e',
    grey4: '#bdc6cf',
    grey5: '#e1e8ee',
    searchBg: '#303337',
    disabled: 'hsl(208, 8%, 90%)',
  },
  darkColors: {
    primary: '#6DB28F',
    secondary: '#2B303B',
    success: '#4CAF50', 
    warning: '#FF9800',
    error: '#E35B52',
    text: '#D0F4D8',
    grey0: '#393e42',
    grey1: '#43484d', 
    grey2: '#5e6977',
    grey3: '#86939e',
    grey4: '#bdc6cf',
    grey5: '#e1e8ee',
    searchBg: '#303337',
    disabled: 'hsl(208, 8%, 90%)',
  },
  mode: 'light', // This will be controlled by our theme system
});
```

### 3. iOS-Style Component Guidelines

#### Buttons

```typescript
// Primary Action Button
<Button
  title="Save"
  buttonStyle={{
    backgroundColor: theme.colors.primary,
    borderRadius: 12,
    paddingVertical: 12,
  }}
  titleStyle={{
    fontSize: 16,
    fontWeight: '600',
  }}
/>

// Secondary Button
<Button
  title="Cancel"
  type="outline"
  buttonStyle={{
    borderColor: theme.colors.border,
    borderRadius: 12,
    paddingVertical: 12,
  }}
  titleStyle={{
    color: theme.colors.text,
    fontSize: 16,
    fontWeight: '500',
  }}
/>
```

#### Input Fields

```typescript
<Input
  placeholder="Enter name"
  inputStyle={{
    fontSize: 16,
    color: theme.colors.text,
  }}
  inputContainerStyle={{
    borderBottomWidth: 0,
    backgroundColor: theme.colors.background,
    borderRadius: 12,
    paddingHorizontal: 16,
    borderWidth: 1,
    borderColor: theme.colors.border,
  }}
  containerStyle={{
    paddingHorizontal: 0,
  }}
  leftIcon={
    <Icon
      name="person-outline"
      type="ionicon"
      color={theme.colors.text}
      size={20}
    />
  }
/>
```

#### Cards

```typescript
<Card
  containerStyle={{
    borderRadius: 16,
    shadowOpacity: 0.1,
    shadowRadius: 8,
    shadowOffset: { width: 0, height: 2 },
    elevation: 4,
    borderWidth: 0,
    backgroundColor: theme.colors.card,
  }}
>
  <Card.Title style={{ color: theme.colors.text }}>
    Card Title
  </Card.Title>
  <Card.Divider />
  {/* Card content */}
</Card>
```

#### List Items

```typescript
<ListItem
  containerStyle={{
    backgroundColor: theme.colors.card,
    borderRadius: 12,
    marginVertical: 4,
  }}
  onPress={() => {}}
>
  <Icon
    name="person"
    type="ionicon"
    color={theme.colors.primary}
  />
  <ListItem.Content>
    <ListItem.Title style={{ color: theme.colors.text }}>
      Title
    </ListItem.Title>
    <ListItem.Subtitle style={{ color: theme.colors.text, opacity: 0.7 }}>
      Subtitle
    </ListItem.Subtitle>
  </ListItem.Content>
  <ListItem.Chevron color={theme.colors.text} />
</ListItem>
```

### 4. iOS-Style Layout Patterns

#### Screen Layout

```typescript
const IOSScreenLayout = () => {
  return (
    <SafeAreaProvider>
      <Header
        centerComponent={{
          text: 'Screen Title',
          style: { color: theme.colors.text, fontSize: 18, fontWeight: '600' }
        }}
        backgroundColor={theme.colors.background}
        statusBarProps={{
          backgroundColor: theme.colors.background,
          barStyle: theme.dark ? 'light-content' : 'dark-content'
        }}
      />
      <ScrollView
        style={{ backgroundColor: theme.colors.background }}
        contentInsetAdjustmentBehavior="automatic"
      >
        {/* Content with consistent padding */}
        <View style={{ padding: 16 }}>
          {/* Components */}
        </View>
      </ScrollView>
    </SafeAreaProvider>
  );
};
```

#### Form Sections

```typescript
const FormSection = ({ title, children }) => {
  return (
    <View style={{ marginBottom: 24 }}>
      <Text style={{
        fontSize: 18,
        fontWeight: '600',
        color: theme.colors.text,
        marginBottom: 12,
        paddingHorizontal: 4,
      }}>
        {title}
      </Text>
      <Card containerStyle={cardStyles}>
        {children}
      </Card>
    </View>
  );
};
```

### 5. Spacing & Typography Scale

#### Spacing Scale (use consistently)

```typescript
const spacing = {
  xs: 4,
  sm: 8,
  md: 12,
  lg: 16,
  xl: 20,
  xxl: 24,
  xxxl: 32,
};
```

#### Typography Scale

```typescript
const typography = {
  largeTitle: { fontSize: 34, fontWeight: '700' },
  title1: { fontSize: 28, fontWeight: '700' },
  title2: { fontSize: 22, fontWeight: '700' },
  title3: { fontSize: 20, fontWeight: '600' },
  headline: { fontSize: 17, fontWeight: '600' },
  body: { fontSize: 17, fontWeight: '400' },
  callout: { fontSize: 16, fontWeight: '400' },
  subhead: { fontSize: 15, fontWeight: '400' },
  footnote: { fontSize: 13, fontWeight: '400' },
  caption1: { fontSize: 12, fontWeight: '400' },
  caption2: { fontSize: 11, fontWeight: '400' },
};
```

### 6. Animation & Interaction Guidelines

#### Subtle Animations

```typescript
import { Animated } from 'react-native';

// Gentle fade-in
const fadeIn = useRef(new Animated.Value(0)).current;

Animated.timing(fadeIn, {
  toValue: 1,
  duration: 300,
  useNativeDriver: true,
}).start();

// Gentle scale on press
const scaleValue = useRef(new Animated.Value(1)).current;

const onPressIn = () => {
  Animated.timing(scaleValue, {
    toValue: 0.96,
    duration: 100,
    useNativeDriver: true,
  }).start();
};

const onPressOut = () => {
  Animated.timing(scaleValue, {
    toValue: 1,
    duration: 100,
    useNativeDriver: true,
  }).start();
};
```

### 7. Component Creation Guidelines

#### Always Include These Properties

1. **Accessibility**: `accessibilityLabel`, `accessibilityHint`, `accessibilityRole`
2. **Theme Integration**: Use theme colors and respect dark mode
3. **Consistent Spacing**: Follow the spacing scale
4. **Type Safety**: Proper TypeScript interfaces
5. **Responsive Design**: Handle different screen sizes

#### Example Component Template

```typescript
import React from 'react';
import { useTheme } from '@react-navigation/native';
import { Button, Card } from 'react-native-elements';

interface CustomComponentProps {
  title: string;
  onPress: () => void;
  disabled?: boolean;
}

export const CustomComponent: React.FC<CustomComponentProps> = ({
  title,
  onPress,
  disabled = false,
}) => {
  const theme = useTheme();
  
  return (
    <Card
      containerStyle={{
        borderRadius: 16,
        backgroundColor: theme.colors.card,
        borderWidth: 0,
        shadowOpacity: 0.1,
      }}
    >
      <Button
        title={title}
        onPress={onPress}
        disabled={disabled}
        buttonStyle={{
          backgroundColor: theme.colors.primary,
          borderRadius: 12,
        }}
        disabledStyle={{
          backgroundColor: theme.colors.border,
        }}
        accessibilityLabel={title}
        accessibilityRole="button"
      />
    </Card>
  );
};
```

### 8. Design System Anti-Patterns

**Avoid These Patterns:**

- ❌ Material Design elements (unless specifically needed)
- ❌ Sharp corners (use borderRadius: 8-16px)
- ❌ Heavy shadows or elevation
- ❌ Bright, saturated colors outside the theme
- ❌ Inconsistent spacing values
- ❌ Raw React Native components when RNE equivalents exist
- ❌ Custom styling that overrides the design system
- ❌ Accessibility attributes missing

**Preferred Patterns:**

- ✅ Rounded corners with consistent radius
- ✅ Subtle shadows and gentle transitions
- ✅ Consistent use of theme colors
- ✅ Standard spacing scale
- ✅ React Native Elements components
- ✅ iOS-style navigation patterns
- ✅ Accessibility-first design

### 9. Testing Design Consistency

Before submitting any UI changes:

- [ ] Test in both light and dark modes
- [ ] Verify consistent spacing across screen sizes
- [ ] Check accessibility with screen readers
- [ ] Test on both iOS and Android
- [ ] Ensure animations are smooth and subtle
- [ ] Validate against the design system guidelines

Remember: Every component should feel like it belongs in the iOS ecosystem while maintaining cross-platform functionality and our established brand colors.

---

# Development Workflow Rules

## Feature Development Process

### MANDATORY: Always Follow This Workflow

1. **📋 Dependency Analysis (BEFORE coding)**
   - Identify affected data models and contexts
   - Check UI component dependencies
   - Analyze business logic interactions
   - Review database schema requirements
   - Consider navigation and routing impacts

2. **🔍 Integration Check (DURING development)**
   - Ensure compatibility with existing contexts
   - Verify theme system integration
   - Test navigation flow impacts
   - Validate data consistency across features
   - Check for breaking changes in dependent components

3. **📚 Documentation Update (AFTER implementation)**
   - **MANDATORY**: Update README.md for every new feature
   - Update feature list with new capabilities
   - Modify usage guide with new workflows
   - Update architecture section if needed
   - Add or update screenshots for visual changes

### Critical Dependencies to Always Check

#### Data Layer Dependencies

- **Contexts**: HouseHelpContext, AttendanceContext, PaymentContext, SettingsContext
- **Database**: Check for schema changes, migration needs, foreign key constraints
- **Data Models**: Ensure TypeScript interfaces are updated and consistent

#### UI Layer Dependencies

- **Theme Integration**: All new components must use theme system
- **Navigation**: Update routes, deep links, and navigation flow
- **Components**: Reuse existing ThemedText, ThemedView, and custom components
- **Responsive Design**: Test on different screen sizes and orientations

#### Business Logic Dependencies

- **Calculations**: Salary calculations, attendance logic, payment processing
- **Validation**: Form validation, data integrity checks
- **State Management**: Context state updates and side effects

### Documentation Requirements

#### README.md Updates (MANDATORY)

After implementing any feature, update these sections:

```markdown
## 🎯 Key Features
- Add new feature to appropriate category
- Include technical details and benefits

## 📖 Usage Guide  
- Add step-by-step instructions for new functionality
- Include screenshots or examples

## 🏗️ Architecture
- Update project structure if new files added
- Modify data architecture for database changes
- Update technology stack if new dependencies added

## 🗄️ Database Schema
- Document new tables or column additions
- Update relationship diagrams
```

### Code Quality Standards

#### TypeScript Requirements

- **Strict Typing**: All new code must have proper TypeScript types
- **Interface Updates**: Update existing interfaces when modifying data structures
- **Generic Types**: Use generics for reusable components and functions

#### Testing Requirements

- **Unit Tests**: Write tests for new business logic
- **Integration Tests**: Test context interactions and data flow
- **UI Tests**: Verify theme compatibility and responsive behavior

#### Performance Considerations

- **Database Indexing**: Add indexes for new query patterns
- **Memory Management**: Use proper cleanup in useEffect hooks
- **Bundle Size**: Monitor and optimize import statements

### Error Handling Standards

#### User Experience

- **Loading States**: Show appropriate loading indicators
- **Error Messages**: Provide clear, actionable error messages
- **Fallback UI**: Graceful degradation for error states
- **Data Persistence**: Ensure data integrity during errors

#### Development Experience

- **Error Boundaries**: Implement proper error boundaries
- **Logging**: Add meaningful console logs for debugging
- **Type Safety**: Use TypeScript to prevent runtime errors

### File Organization Rules

#### Component Structure

```typescript
// components/NewComponent.tsx
import { useTheme } from '@react-navigation/native';
import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';

interface Props {
  // Always define proper TypeScript interfaces
}

export const NewComponent: React.FC<Props> = (props) => {
  const theme = useTheme();
  
  // Component logic
  
  return (
    <ThemedView style={[styles.container, { borderColor: theme.colors.border }]}>
      {/* Always use themed components */}
    </ThemedView>
  );
};
```

#### Context Updates

When modifying contexts:

- Update TypeScript interfaces
- Add proper error handling
- Update database operations if needed
- Test with existing components

#### Database Changes

For any database modifications:

- Write migration scripts
- Update utility functions in `utils/database.ts`
- Test backward compatibility
- Update TypeScript interfaces

### Feature Implementation Checklist

Before marking any feature as complete:

- [ ] **Dependencies analyzed and addressed**
- [ ] **Theme system properly integrated**
- [ ] **TypeScript interfaces updated**
- [ ] **Database operations tested**
- [ ] **Navigation flow verified**
- [ ] **Error handling implemented**
- [ ] **Loading states added**
- [ ] **README.md updated with new feature**
- [ ] **Usage guide updated**
- [ ] **Architecture docs updated**
- [ ] **Screenshots updated if UI changed**
- [ ] **Cross-platform testing completed**
- [ ] **Performance impact assessed**

### Anti-Patterns to Avoid

- ❌ **Skipping dependency analysis** - Always check before coding
- ❌ **Forgetting README updates** - Documentation must stay current
- ❌ **Breaking existing features** - Test integration thoroughly
- ❌ **Ignoring theme system** - All UI must respect themes
- ❌ **Hardcoding values** - Use configuration and theme constants
- ❌ **Poor error handling** - Always provide user feedback
- ❌ **Inconsistent file structure** - Follow established patterns
- ❌ **Missing TypeScript types** - Maintain type safety

### Success Criteria

A feature is only complete when:

1. **Functionality works** as specified
2. **Integration is seamless** with existing features
3. **Documentation is updated** in README.md
4. **Code quality standards** are met
5. **Theme consistency** is maintained
6. **Error handling** is implemented
7. **Performance impact** is acceptable

Remember: Quality over speed. Take time to do it right the first time.
