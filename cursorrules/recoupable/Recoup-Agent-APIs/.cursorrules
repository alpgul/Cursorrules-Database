# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using TurboFactory from @ardrive/turbo-sdk, the fileStreamFactory must return a Web API compatible ReadableStream from node:stream/web, not Node.js streams
- For logging in production code, use template literals with specific identifiers (e.g. handle, artistId) to make debugging easier
- When handling image uploads, implement proper fallback mechanisms and clear error messages
- When using LLM for batch processing, use smaller batch sizes (100 instead of 500) to avoid token limits and truncation issues
- Add validation for LLM response structure before parsing JSON to catch malformed responses early
- When processing large datasets with LLMs, reduce concurrency (3 vs 5) to maintain stability
- Include detailed context in error logs for JSON parsing failures (position, nearby content)
- Validate response structure before cleaning/parsing to catch malformed responses early
- Use chunked processing for database queries to handle large datasets efficiently
- Test system changes with varying dataset sizes to ensure scalability
- Log sample data and statistics when processing batches to aid debugging
- Implement progressive validation (structure, content, parsing) to fail fast and provide clear error context
- Always prefix API endpoints with /api for consistency and clarity
- Keep API routes organized by resource type (e.g. /api/agentkit/run, /api/generate)
- Separate data fetching from data processing in API endpoints for better maintainability
- Use appropriate HTTP methods (GET for retrieval, POST for actions/mutations)
- Include request validation middleware for API endpoints
- Add rate limiting for scraping endpoints to prevent abuse
- Only use await with async functions - check if a function is actually async before awaiting it
- When handling agent status updates, make progress parameters optional and handle null agent_status_id gracefully to prevent TypeError exceptions
- Keep agent status tracking separate from data processing functions to maintain better separation of concerns
- Use proper error handling and logging in asynchronous operations to catch and report issues early

# Scratchpad

### Current Task: Fix Error Handling for Segment Generation

Task Description:
Currently, segment generation only proceeds if all platforms have a SUCCESS status. We need to modify this to proceed if all platforms have either SUCCESS or ERROR status.

Current Issue:

- Only checks for STEP_OF_AGENT.FINISHED
- Doesn't account for error states
- May leave platforms in limbo if some fail

Required Changes:

1. Modify completion check logic:
   - Consider both SUCCESS and ERROR states as "complete"
   - Ensure all platforms have reached a final state
   - Add proper error state tracking

Analysis:

1. [x] Review Current Implementation:

   - [x] Platform Processing:
     - Uses Promise.all for parallel processing
     - Each platform updates own status
     - Currently only checks for FINISHED status
   - [x] Completion Check:
     - areAllPlatformsComplete only checks for FINISHED
     - Needs to be updated for ERROR states

2. [ ] Implementation Plan:

   - [ ] Add ERROR state to STEP_OF_AGENT enum if not exists
   - [ ] Modify areAllPlatformsComplete function:
     ```typescript
     const areAllPlatformsComplete = async (
       agentId: string
     ): Promise<boolean> => {
       const { data } = await this.agentService.getAgentStatus(agentId);
       if (!data) return false;
       return data.statuses.every(
         (status) =>
           status.status === STEP_OF_AGENT.FINISHED ||
           status.status === STEP_OF_AGENT.ERROR
       );
     };
     ```
   - [ ] Update error handling in processPlatform:
     ```typescript
     catch (error) {
       console.error(`‚ùå Error processing ${platform}:`, error);
       if (agent_status?.id) {
         await updateAgentStatus(agent_status.id, STEP_OF_AGENT.ERROR);
       }
     }
     ```
   - [ ] Add error state logging

3. [ ] Required Changes:

   ```typescript
   1. Update STEP_OF_AGENT enum
   2. Modify completion check logic
   3. Add error state handling
   4. Update logging for error states
   ```

4. [ ] Testing Plan:
   - [ ] Test successful completion
   - [ ] Test partial failure
   - [ ] Test complete failure
   - [ ] Verify segment generation with mixed states

Files to Modify:

- [ ] `lib/step.ts` (add ERROR state)
- [ ] `controllers/PilotController.ts` (update completion logic)

Next Steps:

1. [ ] Check if ERROR state exists in STEP_OF_AGENT
2. [ ] Update completion check logic
3. [ ] Add error state handling
4. [ ] Test changes

Next Action:
Let's first check the STEP_OF_AGENT enum to see if we need to add the ERROR state.
