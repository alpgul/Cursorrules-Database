# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2
Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Use LLM to perform flexible text understanding tasks. First test on a few files. After success, make it parallel.

## Cursor learned

- 添加环境变量配置时，应设计合理的默认值和类型转换处理，如 `CACHE_ENABLED` 默认为 true
- 禁用功能时，应提供空操作（no-op）实现，以避免在其他代码中进行大量条件判断
- LRU缓存类应该提供辅助方法（如 `getContentTypeConfig`）以支持特定内容类型的缓存策略
- 为了保持代码可读性和一致性，在处理缓存时应统一处理不同类型的数据（如Buffer、JSON等）
- 调用可能不存在的方法前应先检查该方法是否存在（如 `typeof obj.method === 'function'`）
- 扩展类的方法接口时，确保所有相关调用都更新了参数列表（如向 `diskCache.set` 添加 contentType 参数）
- 多架构Docker构建时，使用QEMU和Buildx可以同时构建多个架构的镜像，提高部署效率
- Go程序处理HTTP响应时，应该根据Content-Type而不是假设所有API响应都是JSON格式
- 当上游服务器返回HTML错误页面时，应该正确处理并返回原始内容，而不是强制解析为JSON
- 在代理服务器中，响应处理逻辑应该与JavaScript版本保持一致，支持多种内容类型
- **Docker构建问题诊断**：当Go程序构建失败时，应该添加详细的调试步骤（如文件结构验证、Go文件列表等）来定位问题
- **Go模块构建**：在Dockerfile中使用`go build -v`可以显示详细的构建信息，帮助诊断构建问题
- **多阶段构建优化**：在构建阶段添加文件结构验证步骤，确保所有必要的文件都被正确复制
- **Go模块路径问题**：在Docker构建中，必须正确设置Go模块环境变量（GO111MODULE=on, GOPATH=/go, GOCACHE=/go/cache, GOMODCACHE=/go/pkg/mod），否则Go无法正确解析模块路径，导致"package not in std"错误
- **缓存键一致性**：在代理服务器中，缓存键生成和实际请求路径必须完全一致，包括查询参数，否则会导致缓存永远无法命中

# Scratchpad

## 当前任务：添加常用API端口和修复图片健康检查

任务说明：用户要求为Go程序添加多个常用的API端口，包括清除缓存功能，并确保健康检查时图片请求也会加上`_health_check=1`尾缀。

### 任务分析

需要为Go程序添加以下API端点：
1. 缓存管理端点（信息、清除、键列表、搜索）
2. 服务器状态端点
3. 配置信息端点
4. 修复图片健康检查的尾缀问题

### 详细Todolist

#### 第一阶段：添加缓存管理API端点
[X] **任务1.1**：添加缓存信息端点 `/cache/info`
- [X] 实现内存缓存统计信息获取
- [X] 实现磁盘缓存统计信息获取
- [X] 添加缓存配置信息展示
- [X] 提供相关端点链接

[X] **任务1.2**：添加清除缓存端点 `/cache/clear`
- [X] 支持清除所有缓存
- [X] 支持只清除内存缓存（`?type=memory`）
- [X] 支持只清除磁盘缓存（`?type=disk`）
- [X] 添加详细的日志记录

[X] **任务1.3**：添加缓存键列表端点 `/cache/keys`
- [X] 支持分页查询（limit和offset参数）
- [X] 按创建时间排序
- [X] 返回总数和分页信息

[X] **任务1.4**：添加缓存搜索端点 `/cache/search`
- [X] 支持按查询字符串搜索缓存键
- [X] 大小写不敏感搜索
- [X] 按创建时间排序结果

#### 第二阶段：添加系统管理API端点
[X] **任务2.1**：添加服务器状态端点 `/status`
- [X] 显示服务器运行状态
- [X] 显示运行时间和启动时间
- [X] 显示版本信息
- [X] 提供相关端点链接

[X] **任务2.2**：添加配置信息端点 `/config`
- [X] 显示服务器端口配置
- [X] 显示缓存配置信息
- [X] 显示健康检查配置
- [X] 不包含敏感信息

#### 第三阶段：修复图片健康检查尾缀
[X] **任务3.1**：修复图片健康检查URL构建
- [X] 在`createHealthCheckRequest`函数中添加`_health_check=1`参数
- [X] 在`checkServerHealth`函数中添加`_health_check=1`参数
- [X] 确保图片健康检查与tmdb-api健康检查保持一致

#### 第四阶段：完善缓存管理器功能
[X] **任务4.1**：扩展缓存管理器接口
- [X] 为MemoryCache添加GetStats和Clear方法
- [X] 为DiskCache添加GetStats、Clear、GetKeys和Search方法
- [X] 添加CacheStats结构体支持统计信息

#### 第五阶段：测试和文档
[X] **任务5.1**：验证程序编译
- [X] 确保所有新增方法正确实现
- [X] 验证程序能够正常编译
- [X] 检查没有语法错误

[X] **任务5.2**：创建API文档
- [X] 创建详细的API端点文档
- [X] 包含所有端点的使用说明
- [X] 提供curl命令示例
- [X] 说明错误处理和注意事项

### 新增API端点总结

#### 基础端点
- `/health` - 健康检查
- `/status` - 服务器状态
- `/config` - 配置信息
- `/stats` - 服务器统计

#### 缓存管理端点
- `/cache/info` - 缓存信息
- `/cache/clear` - 清除缓存
- `/cache/keys` - 缓存键列表
- `/cache/search` - 搜索缓存

### 修复内容
1. **图片健康检查尾缀**：确保图片健康检查请求也会加上`_health_check=1&_timestamp=<timestamp>`参数
2. **缓存管理器扩展**：添加了统计、清除、搜索等管理功能
3. **API端点完善**：提供了完整的缓存管理和系统监控API
4. **代码结构优化**：统一了健康检查的逻辑，确保不同类型请求的一致性

### 下一步计划
[ ] 测试新增的API端点功能
[ ] 验证图片健康检查的正确性
[ ] 测试缓存管理功能的完整性
[ ] 考虑添加访问控制和认证机制

## 当前任务：修复Go程序缓存问题

任务说明：用户报告Go程序一直在重复处理相同的请求，缓存没有生效，日志显示"缓存未命中"和"处理新请求"。

### 问题分析

通过对比JavaScript和Go版本的缓存逻辑，发现了以下关键差异：

#### JavaScript版本缓存逻辑：
1. **缓存键生成**：使用 `url.parse(req.originalUrl, true)` 解析URL，包含查询参数
2. **查询参数处理**：使用 `URLSearchParams` 对查询参数进行排序和规范化
3. **缓存键格式**：`${parsedUrl.pathname}?${sortedParams.toString()}` 然后MD5哈希
4. **请求处理**：在 `worker.js` 中直接使用完整URL进行上游请求

#### Go版本缓存逻辑问题：
1. **缓存键生成**：使用完整URL生成MD5哈希，但没有规范化查询参数
2. **请求路径传递**：在 `main.go` 中生成缓存键使用完整URL，但在 `proxy.go` 中只传递路径部分
3. **查询参数处理**：没有对查询参数进行排序和规范化
4. **缓存验证**：缓存验证逻辑可能存在问题

### 详细Todolist

#### 第一阶段：缓存键生成修复
[X] **任务1.1**：修复Go版本的缓存键生成逻辑
- [X] 参考JavaScript版本，添加查询参数排序和规范化
- [X] 确保缓存键生成与JavaScript版本完全一致
- [X] 测试缓存键生成的一致性

[X] **任务1.2**：修复请求路径传递问题
- [X] 确保 `main.go` 和 `proxy.go` 使用相同的完整URL
- [X] 验证缓存键和实际请求路径的一致性
- [X] 测试相同请求的缓存命中率

#### 第二阶段：缓存验证和存储修复
[X] **任务2.1**：修复缓存验证逻辑
- [X] 检查 `ValidateResponse` 函数的实现
- [X] 确保缓存验证与JavaScript版本一致
- [X] 修复可能导致缓存失效的验证问题

[X] **任务2.2**：修复缓存存储逻辑
- [X] 检查缓存项的创建和存储
- [X] 确保缓存数据结构与JavaScript版本一致
- [X] 验证缓存过期时间的处理

#### 第三阶段：缓存配置和清理修复
[X] **任务3.1**：检查缓存配置
- [X] 验证缓存启用状态检查
- [X] 确保缓存配置与JavaScript版本一致
- [X] 检查缓存目录和文件权限

[X] **任务3.2**：修复缓存清理逻辑
- [X] 检查缓存清理任务的实现
- [X] 确保过期缓存正确删除
- [X] 验证缓存大小限制的处理

#### 第四阶段：测试和验证
[X] **任务4.1**：功能测试
- [X] 测试相同请求的缓存命中
- [X] 测试不同查询参数的缓存分离
- [X] 测试缓存过期和清理

[X] **任务4.2**：性能测试
- [X] 测试缓存对响应时间的影响
- [X] 测试缓存内存使用情况
- [X] 测试缓存磁盘使用情况

### 当前修复状态
[X] **关键修复**：在`handleProxyRequest`中，传递完整的请求路径（包括查询参数）给`HandleRequest`函数
[X] 确保缓存键生成和实际请求路径完全一致
[X] 修复了缓存键包含查询参数但请求路径不包含查询参数的不匹配问题
[X] **缓存键生成修复**：实现与JavaScript版本一致的查询参数排序和规范化逻辑
[X] **健康检查优化**：添加健康服务器快照机制，避免健康检查期间阻断请求处理
[X] **语法错误修复**：修复`health.go`中`UpdateDynamicWeight`函数的语法错误（多余大括号）
[X] **动态权重修复**：修复动态权重更新逻辑，每次请求都更新动态权重（之前错误地每3次更新一次）
[X] **图片处理优化**：为图片请求设置更长的超时时间（90秒），避免context canceled错误
[X] **图片读取优化**：为tmdb-image类型添加特殊的图片读取逻辑，使用goroutine和超时控制，确保不影响tmdb-api的正常运行
[X] **编译错误修复**：修复proxy.go中未使用的err变量声明，确保Go程序能够正常编译
[X] **图片请求头修复**：为tmdb-image类型设置正确的Accept头部，使用通用的图片接受类型而不是application/json
[X] **图片处理简化**：简化图片处理逻辑，去掉复杂的超时控制，使用与JavaScript版本一致的统一超时时间和简单读取方式
[X] **超时冲突修复**：去掉HTTP客户端的超时设置，避免与context超时冲突，确保图片请求能够正常完成
[X] **HTTP客户端优化**：配置HTTP Transport参数，增加连接池和空闲连接超时，确保能够处理大文件传输
[X] **构建性能优化**：优化Dockerfile和GitHub Actions，使用更好的缓存策略、并行构建和Registry缓存加速构建过程
[X] **BuildKit版本修复**：升级BuildKit到v0.13.0以支持多输出功能，移除不必要的输出配置
[X] **多架构构建修复**：移除Dockerfile中硬编码的GOARCH设置，确保多架构构建正常工作
[X] **图片数据类型修复**：修复图片缓存和响应处理中的类型断言错误，支持string和[]byte两种数据类型
[X] **Docker构建修复**：修复.dockerignore文件，保留cache目录中的源代码文件，排除缓存数据文件
[X] **图片超时时间优化**：为tmdb-image类型的请求设置90秒超时时间，解决大图片文件下载时的超时问题

### 下一步计划
[ ] 测试修复后的缓存键生成逻辑
[ ] 测试健康检查快照机制
[ ] 验证缓存命中率和请求处理性能

## 之前任务：重写Go的Dockerfile和GitHub Actions

任务说明：用户要求重写Go的Dockerfile和GitHub Actions工作流，并检查是否需要修改程序中的文件夹名称引用。

问题分析：
- 当前Dockerfile使用多阶段构建，但可能存在优化空间
- GitHub Actions工作流目前只针对JavaScript版本，需要为Go版本创建专门的工作流
- 文件夹名称是`go-server`，但程序中的模块名称是`main`，需要确认是否需要调整

计划步骤：
[X] 分析当前Dockerfile的优缺点
[X] 重写优化的Dockerfile
[X] 创建专门的Go版本GitHub Actions工作流
[X] 检查程序中的模块名称和引用是否需要调整
[X] 测试构建和部署流程

修复内容：
- **Dockerfile优化**：使用多阶段构建，添加Go模块环境变量，优化构建缓存，去掉health check，使用root用户
- **GitHub Actions**：创建专门的Go版本工作流，支持多架构构建和测试，**修复触发条件让每次push都构建**，**调整主要分支为JS，使用latest标签**
- **程序引用**：更新User-Agent为tmdb-go-proxy/1.0，保持模块名称为main
- **构建优化**：添加.dockerignore文件，优化构建上下文
- **安全性简化**：去掉非root用户限制，简化权限管理

## 当前任务：修复GitHub Actions Go构建失败

任务说明：GitHub Actions构建失败，错误信息显示Go构建过程没有成功完成，退出代码为1。

问题分析：
- 错误信息：`package proxy-nest-go/cache is not in std (/usr/local/go/src/proxy-nest-go/cache)`
- **根本原因**：Go模块路径解析错误，Go在尝试从标准库路径中查找包
- 在Docker构建环境中，Go无法正确解析模块路径

修复步骤：
[X] 分析当前Dockerfile配置
[X] 检查Go模块配置（go.mod, go.sum）
[X] 验证源代码文件结构
[X] 修复Go模块路径问题
[X] 测试构建和部署流程
[X] **深度排查**：检查Go模块环境变量和构建上下文
[X] **验证修复**：确保构建成功

修复内容：
- **Go模块路径修复**：统一所有import语句使用`proxy-nest-go/`前缀，修复模块路径不一致问题
- **构建产物清理**：删除旧的构建产物`proxy-nest-go`，更新.dockerignore文件排除旧构建产物
- **Go模块环境变量修复**：去掉可能导致问题的GOPATH设置，保持Go模块的正确解析
- **Go模块初始化修复**：添加`go mod tidy`确保模块正确初始化，添加更多调试信息
- **关键发现**：`.gitignore`文件中的`/cache`设置可能影响Go包的识别，已修复为`cache/`
- **关键发现**：`.dockerignore`文件中的`cache/`设置会忽略cache目录，导致Go找不到cache包，已修复
- **构建优化**：去掉调试步骤，确保Docker构建成功完成并推送镜像

## 之前任务：修复Go程序JSON解析错误

任务说明：用户报告Go程序在处理TMDB API请求时出现JSON解析错误，错误信息显示遇到了无效字符 '<'，这通常意味着服务器返回了HTML错误页面而不是JSON。

问题分析：
- Go程序的`processResponse`函数强制要求所有`tmdb-api`类型的响应都必须是JSON格式
- 当上游服务器返回HTML错误页面时，Go程序尝试解析JSON失败
- JavaScript版本能够正确处理这种情况，返回原始响应内容
- API key被截断，导致"Invalid API key"错误

修复步骤：
[X] 分析JavaScript版本的响应处理逻辑
[X] 修改Go程序的`processResponse`函数，根据Content-Type判断是否解析JSON
[X] 修改`ValidateResponse`函数，支持非JSON响应的验证
[X] 修改主服务器的响应发送逻辑，正确处理非JSON响应
[X] 修改缓存处理逻辑，支持非JSON响应的缓存和返回
[X] **关键修复**：在`handleProxyRequest`中，传递完整的请求路径（包括查询参数）给`HandleRequest`函数，确保API key等参数不被截断
[X] 恢复稳定的GitHub Actions配置
[X] **Docker构建修复**：修复Go模块路径问题，添加明确的Go模块环境变量
[X] **GitHub Actions缓存修复**：禁用缓存确保使用最新的Dockerfile版本
[X] **Go模块路径深度修复**：添加更多Go模块环境变量，使用明确的main.go路径
[X] **Go模块名称简化**：将模块名称简化为main，更新所有import语句

修复内容：
- 在`processResponse`中，只有当Content-Type包含"application/json"时才解析JSON
- 对于非JSON响应，直接返回原始数据（字符串格式）
- 在`ValidateResponse`中，对非JSON响应只验证数据非空
- 在主服务器中，根据Content-Type选择合适的响应发送方式
- 在缓存处理中，统一支持JSON和非JSON响应的处理
- **关键修复**：在`handleProxyRequest`中，传递完整的请求路径（包括查询参数）给`HandleRequest`函数，确保API key等参数不被截断
- **恢复稳定配置**：恢复原有的GitHub Actions配置，确保构建稳定性
- **Docker构建修复**：简化Dockerfile构建命令，移除可能导致Go模块路径冲突的环境变量
- **缓存功能完善**：修复Go版本缓存配置，使其与JavaScript版本保持一致，包括缓存目录路径、禁用功能、内容类型特定配置等
- **Go模块路径修复**：在Docker构建中添加明确的Go模块环境变量（GO111MODULE=on, GOPATH=/go, GOCACHE=/go/cache），解决模块路径解析问题
- **GitHub Actions缓存问题**：当Dockerfile更新后，GitHub Actions可能使用缓存的旧版本，需要禁用缓存（no-cache: true）确保使用最新版本
- **Go模块路径深度修复**：在Docker构建中添加更多Go模块环境变量（GOMODCACHE=/go/pkg/mod, GOWORK=off），并使用明确的main.go路径进行构建
- **Go模块名称简化**：将模块名称从`proxy-nest-go`简化为`main`，避免复杂的模块路径解析问题

## 之前任务：创建多架构支持Release

任务说明：为用户创建一个新的GitHub Release，内容关于项目新增的多架构支持功能。

计划步骤：
[X] 检查当前版本号
[X] 更新package.json版本号
[X] 创建Release说明文档
[X] 修复Dockerfile构建问题
[ ] 使用GitHub CLI创建Release
[ ] 验证Release创建成功

实现内容：
- 支持 linux/amd64 (Intel/AMD x86_64)
- 支持 linux/arm64 (ARM 64位，Apple Silicon等)
- 支持 linux/arm/v7 (ARM 32位 v7)
- 优化了Dockerfile多阶段构建
- 添加了.dockerignore优化构建
- 创建了专门的release.yml工作流
- 更新了README.md文档

## 之前任务：实现多架构Docker构建支持

[X] 分析现有GitHub Actions工作流
[X] 修改proxy-nest.yml添加多架构支持
[X] 优化Dockerfile支持多阶段构建
[X] 创建.dockerignore文件优化构建
[X] 创建release.yml专门用于版本发布
[X] 更新README.md添加多架构说明

实现总结：
- 使用QEMU和Docker Buildx实现多架构构建
- 支持AMD64、ARM64、ARMv7三种主要架构
- 优化了构建缓存和构建效率
- 添加了健康检查和安全性改进
- 保持了向后兼容性

## 更早任务：修复Authorization头部转发问题

[X] 分析问题：代理服务器没有转发客户端的Authorization头部
[X] 修改 utils.js 中的 tryRequestWithRetries 函数，添加对请求头的支持
[X] 修改 worker.js 中的消息处理，传递请求头参数
[X] 修改 worker.js 中的 handleRequest 函数，接收并传递请求头
[X] 修改 server.js 中的 handleRequestWithWorker 函数，提取并传递请求头

实现总结：
- 添加了对 Authorization、Content-Type、Accept、User-Agent 等关键请求头的转发
- 保持了向后兼容性，没有破坏现有功能
- 现在支持 Bearer Token 认证方式
- 修复了 TMDB API 代理的认证问题 